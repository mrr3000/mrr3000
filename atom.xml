<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marong&#39;s Note</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-10-04T15:31:15.992Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Marong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch 学习笔记</title>
    <link href="http://yoursite.com/2022/10/05/book/video/202210ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2022/10/05/book/video/202210ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-05T06:42:04.000Z</published>
    <updated>2022-10-04T15:31:15.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-开篇"><a href="#01-开篇" class="headerlink" title="01 开篇"></a>01 开篇</h1><ul><li>结构化数据 mysql</li><li>非结构化数据 视频 图表 图片</li><li>半结构化数据 代码片断 EXCEL WORD</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>elasticsearch-head chrome插件安装</li><li>Elasticsearch Kibanna </li><li>IK分词器 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.8.0" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.8.0</a> 放入plugins重启</li></ul><h1 id="02-技术选型"><a href="#02-技术选型" class="headerlink" title="02 技术选型"></a>02 技术选型</h1><p>The Elastic Stack, 包括 Elasticsearch、 Kibana、 Beats 和 Logstash（也称为 ELK Stack）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。</p><p>Elaticsearch，简称为 ES， ES 是一个开源的高扩展的分布式全文搜索引擎， 是整个 ElasticStack 技术栈的核心。</p><p>它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</p><p>分布式 RESTFULL  json 搜索  分析</p><h1 id="03-ES-7-8"><a href="#03-ES-7-8" class="headerlink" title="03 ES 7.8"></a>03 ES 7.8</h1><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>bin</td><td>可执行脚本目录</td></tr><tr><td>config</td><td>配置目录</td></tr><tr><td>jdk</td><td>内置 JDK目录</td></tr><tr><td>lib</td><td>类库</td></tr><tr><td>logs</td><td>日志目录</td></tr><tr><td>modules</td><td>模块目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr></tbody></table><p>解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务 。</p><p>注意： 9300 端口为 Elasticsearch 集群间组件的通信端口， 9200 端口为浏览器访问的 http协议 RESTful 端口。</p><h1 id="04-倒排索引"><a href="#04-倒排索引" class="headerlink" title="04 倒排索引"></a>04 倒排索引</h1><p>正排索引（传统）</p><table><thead><tr><th>id</th><th>content</th></tr></thead><tbody><tr><td>1001</td><td>my name is zhang san</td></tr><tr><td>1002</td><td>my name is li si</td></tr></tbody></table><p>倒排索引</p><table><thead><tr><th>keyword</th><th>id</th></tr></thead><tbody><tr><td>name</td><td>1001, 1002</td></tr><tr><td>zhang</td><td>1001</td></tr></tbody></table><p>Elasticsearch 是面向文档型数据库，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232247475.png" alt="image-20221004232247475"></p><h1 id="05-索引-创建、获取、删除"><a href="#05-索引-创建、获取、删除" class="headerlink" title="05 索引 创建、获取、删除"></a>05 索引 创建、获取、删除</h1><h3 id="创建-PUT-http-localhost-9200-shopping"><a href="#创建-PUT-http-localhost-9200-shopping" class="headerlink" title="创建  PUT http://localhost:9200/shopping"></a>创建  PUT <a href="http://localhost:9200/shopping" target="_blank" rel="noopener">http://localhost:9200/shopping</a></h3><h3 id="查看所有索引-GET-http-localhost-9200-cat-indices-v"><a href="#查看所有索引-GET-http-localhost-9200-cat-indices-v" class="headerlink" title="查看所有索引 GET  http://localhost:9200/_cat/indices?v"></a>查看所有索引 GET  <a href="http://localhost:9200/_cat/indices?v" target="_blank" rel="noopener">http://localhost:9200/_cat/indices?v</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">health status index    uuid   pri rep docs.count docs.deleted store.size pri.store.size </span><br><span class="line">yellow open   shopping J0WlEhh4R7aDrfIc3AkwWQ   1   1          0            0       208b           208b</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>含义</th></tr></thead><tbody><tr><td>health</td><td>当前服务器健康状态： green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)</td></tr><tr><td>status</td><td>索引打开、关闭状态</td></tr><tr><td>index</td><td>索引名</td></tr><tr><td>uuid</td><td>索引统一编号</td></tr><tr><td>pri</td><td>主分片数量</td></tr><tr><td>rep</td><td>副本数量</td></tr><tr><td>docs.count</td><td>可用文档数量</td></tr><tr><td>docs.deleted</td><td>文档删除状态（逻辑删除）</td></tr><tr><td>store.size</td><td>主分片和副分片整体占空间大小</td></tr><tr><td>pri.store.size</td><td>主分片占空间大小</td></tr></tbody></table><h3 id="查看单个索引-GET-http-localhost-9200-shopping"><a href="#查看单个索引-GET-http-localhost-9200-shopping" class="headerlink" title="查看单个索引 GET http://localhost:9200/shopping"></a>查看单个索引 GET <a href="http://localhost:9200/shopping" target="_blank" rel="noopener">http://localhost:9200/shopping</a></h3><h3 id="删除索引-DELETE-http-localhost-9200-shopping"><a href="#删除索引-DELETE-http-localhost-9200-shopping" class="headerlink" title="删除索引 DELETE http://localhost:9200/shopping"></a>删除索引 DELETE <a href="http://localhost:9200/shopping" target="_blank" rel="noopener">http://localhost:9200/shopping</a></h3><h1 id="06文档-创建"><a href="#06文档-创建" class="headerlink" title="06文档 创建"></a>06文档 创建</h1><h3 id="创建-POST-http-localhost-9200-shopping-doc"><a href="#创建-POST-http-localhost-9200-shopping-doc" class="headerlink" title="创建 POST http://localhost:9200/shopping/_doc"></a>创建 POST <a href="http://localhost:9200/shopping/_doc" target="_blank" rel="noopener">http://localhost:9200/shopping/_doc</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"小米手机"</span>,</span><br><span class="line">  <span class="attr">"category"</span>:<span class="string">"小米"</span>,</span><br><span class="line">  <span class="attr">"images"</span>:<span class="string">"http://www.gulixueyuan.com/xm.jpg"</span>,</span><br><span class="line">  <span class="attr">"price"</span>:<span class="number">3999.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建时指定http-localhost-9200-shopping-doc-1"><a href="#创建时指定http-localhost-9200-shopping-doc-1" class="headerlink" title="创建时指定http://localhost:9200/shopping/_doc/1"></a>创建时指定<a href="http://localhost:9200/shopping/_doc/1" target="_blank" rel="noopener">http://localhost:9200/shopping/_doc/1</a></h3><h1 id="07-文档-主键查询-amp-全量查询"><a href="#07-文档-主键查询-amp-全量查询" class="headerlink" title="07 文档 主键查询 &amp; 全量查询"></a>07 文档 主键查询 &amp; 全量查询</h1><h3 id="主键查询-GET-http-localhost-9200-shopping-doc-1"><a href="#主键查询-GET-http-localhost-9200-shopping-doc-1" class="headerlink" title="主键查询 GET http://localhost:9200/shopping/_doc/1"></a>主键查询 GET <a href="http://localhost:9200/shopping/_doc/1" target="_blank" rel="noopener">http://localhost:9200/shopping/_doc/1</a></h3><h3 id="查询索引下所有数据-GET-http-localhost-9200-shopping-search"><a href="#查询索引下所有数据-GET-http-localhost-9200-shopping-search" class="headerlink" title="查询索引下所有数据 GET http://localhost:9200/shopping/_search"></a>查询索引下所有数据 GET <a href="http://localhost:9200/shopping/_search" target="_blank" rel="noopener">http://localhost:9200/shopping/_search</a></h3><h1 id="08-文档-全量修改-amp-局部修改-amp-删除"><a href="#08-文档-全量修改-amp-局部修改-amp-删除" class="headerlink" title="08 文档 全量修改 &amp; 局部修改 &amp; 删除"></a>08 文档 全量修改 &amp; 局部修改 &amp; 删除</h1><h3 id="全量修改-POST-http-localhost-9200-shopping-doc-1"><a href="#全量修改-POST-http-localhost-9200-shopping-doc-1" class="headerlink" title="全量修改 POST http://localhost:9200/shopping/_doc/1"></a>全量修改 POST <a href="http://localhost:9200/shopping/_doc/1" target="_blank" rel="noopener">http://localhost:9200/shopping/_doc/1</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"华为手机"</span>,</span><br><span class="line">    <span class="attr">"category"</span>:<span class="string">"华为"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://www.gulixueyuan.com/hw.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">1999.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部修改-POST-http-localhost-9200-shopping-update-1"><a href="#局部修改-POST-http-localhost-9200-shopping-update-1" class="headerlink" title="局部修改 POST http://localhost:9200/shopping/_update/1"></a>局部修改 POST <a href="http://localhost:9200/shopping/_update/1" target="_blank" rel="noopener">http://localhost:9200/shopping/_update/1</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"doc"</span>: &#123;</span><br><span class="line"><span class="attr">"title"</span>:<span class="string">"小米手机"</span>,</span><br><span class="line"><span class="attr">"category"</span>:<span class="string">"小米"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-DELETE-http-localhost-9200-shopping-doc-1"><a href="#删除-DELETE-http-localhost-9200-shopping-doc-1" class="headerlink" title="删除 DELETE http://localhost:9200/shopping/_doc/1"></a>删除 DELETE <a href="http://localhost:9200/shopping/_doc/1" target="_blank" rel="noopener">http://localhost:9200/shopping/_doc/1</a></h3><h1 id="09-条件查询-amp-分页查询-amp-查询排序"><a href="#09-条件查询-amp-分页查询-amp-查询排序" class="headerlink" title="09 条件查询 &amp; 分页查询 &amp; 查询排序"></a>09 条件查询 &amp; 分页查询 &amp; 查询排序</h1><h3 id="条件查询-路径带参-GET-http-localhost-9200-shopping-search-q-category-小米"><a href="#条件查询-路径带参-GET-http-localhost-9200-shopping-search-q-category-小米" class="headerlink" title="条件查询 - 路径带参 GET http://localhost:9200/shopping/_search?q=category:小米"></a>条件查询 - 路径带参 GET <a href="http://localhost:9200/shopping/_search?q=category:小米" target="_blank" rel="noopener">http://localhost:9200/shopping/_search?q=category:小米</a></h3><h3 id="条件查询-请求体传参-GET-http-localhost-9200-shopping-search"><a href="#条件查询-请求体传参-GET-http-localhost-9200-shopping-search" class="headerlink" title="条件查询 - 请求体传参 GET  http://localhost:9200/shopping/_search"></a>条件查询 - 请求体传参 GET  <a href="http://localhost:9200/shopping/_search" target="_blank" rel="noopener">http://localhost:9200/shopping/_search</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"match"</span>:&#123;</span><br><span class="line"><span class="attr">"category"</span>:<span class="string">"小米"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询全部</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"match_all"</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询指定字段</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"match_all"</span>:&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"_source"</span>:[<span class="string">"title"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"match_all"</span>:&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"from"</span>:<span class="number">0</span>,</span><br><span class="line"><span class="attr">"size"</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询排序</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"match_all"</span>:&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"sort"</span>:&#123;</span><br><span class="line"><span class="attr">"price"</span>:&#123;</span><br><span class="line"><span class="attr">"order"</span>:<span class="string">"desc"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-多条件查询-amp-范围查询"><a href="#10-多条件查询-amp-范围查询" class="headerlink" title="10 多条件查询 &amp; 范围查询"></a>10 多条件查询 &amp; 范围查询</h1><h3 id="多条件查询-请求体传参-GET-http-localhost-9200-shopping-search"><a href="#多条件查询-请求体传参-GET-http-localhost-9200-shopping-search" class="headerlink" title="多条件查询 - 请求体传参 GET  http://localhost:9200/shopping/_search"></a>多条件查询 - 请求体传参 GET  <a href="http://localhost:9200/shopping/_search" target="_blank" rel="noopener">http://localhost:9200/shopping/_search</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bool 多条件  Must 且的关系需要同时满足</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"bool"</span>:&#123;</span><br><span class="line"><span class="attr">"must"</span>:[&#123;</span><br><span class="line"><span class="attr">"match"</span>:&#123;</span><br><span class="line"><span class="attr">"category"</span>:<span class="string">"小米"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="attr">"match"</span>:&#123;</span><br><span class="line"><span class="attr">"price"</span>:<span class="number">3999.00</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// bool 多条件  should 或的关系 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"bool"</span>:&#123;</span><br><span class="line"><span class="attr">"should"</span>:[&#123;</span><br><span class="line"><span class="attr">"match"</span>:&#123;</span><br><span class="line"><span class="attr">"category"</span>:<span class="string">"小米"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="attr">"match"</span>:&#123;</span><br><span class="line"><span class="attr">"category"</span>:<span class="string">"华为"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">// 过滤 范围查询</span></span><br><span class="line">    <span class="attr">"filter"</span>:&#123;</span><br><span class="line">      <span class="attr">"range"</span>:&#123;</span><br><span class="line">        <span class="attr">"price"</span>:&#123;</span><br><span class="line">          <span class="attr">"gt"</span>:<span class="number">2000</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-文档-全文检索-amp-完全匹配-amp-高亮查询"><a href="#11-文档-全文检索-amp-完全匹配-amp-高亮查询" class="headerlink" title="11 文档 全文检索 &amp; 完全匹配 &amp; 高亮查询"></a>11 文档 全文检索 &amp; 完全匹配 &amp; 高亮查询</h1><h3 id="GET-http-localhost-9200-shopping-search"><a href="#GET-http-localhost-9200-shopping-search" class="headerlink" title="GET http://localhost:9200/shopping/_search"></a>GET <a href="http://localhost:9200/shopping/_search" target="_blank" rel="noopener">http://localhost:9200/shopping/_search</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全文检索  查小米 和华为  都会返回</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"match"</span>:&#123;</span><br><span class="line"><span class="attr">"category"</span> : <span class="string">"小华"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完全匹配 只查华为</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"match_phrase"</span>:&#123;</span><br><span class="line"><span class="attr">"category"</span> : <span class="string">"为"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 高亮查询</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>:&#123;</span><br><span class="line"><span class="attr">"match_phrase"</span>:&#123;</span><br><span class="line"><span class="attr">"category"</span> : <span class="string">"为"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">"highlight"</span>:&#123;</span><br><span class="line">        <span class="attr">"fields"</span>:&#123;</span><br><span class="line">            <span class="attr">"category"</span>:&#123;&#125;<span class="comment">//&lt;----高亮这字段</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-文档-聚合查询"><a href="#12-文档-聚合查询" class="headerlink" title="12 文档 聚合查询"></a>12 文档 聚合查询</h1><h3 id="GET-http-localhost-9200-shopping-search-1"><a href="#GET-http-localhost-9200-shopping-search-1" class="headerlink" title="GET http://localhost:9200/shopping/_search"></a>GET <a href="http://localhost:9200/shopping/_search" target="_blank" rel="noopener">http://localhost:9200/shopping/_search</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"aggs"</span>:&#123;<span class="comment">//聚合操作</span></span><br><span class="line"><span class="attr">"price_group"</span>:&#123;<span class="comment">//名称，随意起名</span></span><br><span class="line"><span class="attr">"terms"</span>:&#123;<span class="comment">//分组</span></span><br><span class="line"><span class="attr">"field"</span>:<span class="string">"price"</span><span class="comment">//分组字段</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对所有手机价格求平均值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"aggs"</span>:&#123;</span><br><span class="line"><span class="attr">"price_avg"</span>:&#123;<span class="comment">//名称，随意起名</span></span><br><span class="line"><span class="attr">"avg"</span>:&#123;<span class="comment">//求平均</span></span><br><span class="line"><span class="attr">"field"</span>:<span class="string">"price"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">"size"</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="13-文档-映射关系"><a href="#13-文档-映射关系" class="headerlink" title="13 文档 映射关系"></a>13 文档 映射关系</h1><p>有了索引库，等于有了数据库中的 database。</p><p>接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。</p><p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p><h3 id="创建映射-PUT-http-localhost-9200-user-mapping"><a href="#创建映射-PUT-http-localhost-9200-user-mapping" class="headerlink" title="创建映射 PUT http://localhost:9200/user/_mapping"></a>创建映射 PUT <a href="http://localhost:9200/user/_mapping" target="_blank" rel="noopener">http://localhost:9200/user/_mapping</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>:&#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"text"</span>, <span class="comment">//做分词</span></span><br><span class="line">        <span class="string">"index"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"sex"</span>:&#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"keyword"</span>,<span class="comment">//不分词 只能完全为”男的“完全匹配，才能得出原数据。</span></span><br><span class="line">        <span class="string">"index"</span>: <span class="literal">true</span> <span class="comment">//是否索引</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"tel"</span>:&#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="literal">false</span> <span class="comment">// 根据tel查询，不会返回结果，因为不做索引</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GET-http-localhost-9200-user-mapping"><a href="#GET-http-localhost-9200-user-mapping" class="headerlink" title="GET http://localhost:9200/user/_mapping"></a>GET <a href="http://localhost:9200/user/_mapping" target="_blank" rel="noopener">http://localhost:9200/user/_mapping</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># response</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"user"</span>: &#123;</span><br><span class="line">        <span class="string">"mappings"</span>: &#123;</span><br><span class="line">            <span class="string">"properties"</span>: &#123;</span><br><span class="line">                <span class="string">"name"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"sex"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"tel"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                    <span class="string">"index"</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="14-ES环境部署-win-linux-单机-或-集群"><a href="#14-ES环境部署-win-linux-单机-或-集群" class="headerlink" title="14 ES环境部署  win / linux  单机 或  集群"></a>14 ES环境部署  win / linux  单机 或  集群</h1><h3 id="单机-amp-集群"><a href="#单机-amp-集群" class="headerlink" title="单机 &amp; 集群"></a>单机 &amp; 集群</h3><p>单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。<br>除了负载能力，单点服务器也存在其他问题：</p><ul><li>单台机器存储容量有限</li><li>单服务器容易出现单点故障，无法实现高可用</li><li>单服务的并发处理能力有限</li><li>配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一<br>般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上</li></ul><p>总之，集群能提高性能，增加容错。</p><h3 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群 Cluster"></a>集群 Cluster</h3><p><strong>一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。</strong>一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p><h3 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点 Node"></a>节点 Node</h3><p>集群中包含很多服务器， 一个节点就是其中的一个服务器。 作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</p><p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p><h3 id="config-elasticsearch-yml"><a href="#config-elasticsearch-yml" class="headerlink" title="config/elasticsearch.yml"></a>config/elasticsearch.yml</h3><h4 id="node-1001-节点"><a href="#node-1001-节点" class="headerlink" title="node-1001 节点"></a>node-1001 节点</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#节点 1 的配置信息：</span></span><br><span class="line"><span class="comment">#集群名称，节点之间要保持一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-elasticsearch</span></span><br><span class="line"><span class="comment">#节点名称，集群内要唯一</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1001</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#ip 地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="comment">#http 端口</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">1001</span></span><br><span class="line"><span class="comment">#tcp 监听端口</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9301</span></span><br><span class="line"><span class="comment">#discovery.seed_hosts: ["localhost:9301", "localhost:9302","localhost:9303"]</span></span><br><span class="line"><span class="comment">#discovery.zen.fd.ping_timeout: 1m</span></span><br><span class="line"><span class="comment">#discovery.zen.fd.ping_retries: 5</span></span><br><span class="line"><span class="comment">#集群内的可以被选为主节点的节点列表</span></span><br><span class="line"><span class="comment">#cluster.initial_master_nodes: ["node-1", "node-2","node-3"]</span></span><br><span class="line"><span class="comment">#跨域配置</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><h4 id="node-1002-节点"><a href="#node-1002-节点" class="headerlink" title="node-1002 节点"></a>node-1002 节点</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#节点 2 的配置信息：</span></span><br><span class="line"><span class="comment">#集群名称，节点之间要保持一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-elasticsearch</span></span><br><span class="line"><span class="comment">#节点名称，集群内要唯一</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1002</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#ip 地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="comment">#http 端口</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">1002</span></span><br><span class="line"><span class="comment">#tcp 监听端口</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9302</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["localhost:9301"]</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">1m</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br><span class="line"><span class="comment">#集群内的可以被选为主节点的节点列表</span></span><br><span class="line"><span class="comment">#cluster.initial_master_nodes: ["node-1", "node-2","node-3"]</span></span><br><span class="line"><span class="comment">#跨域配置</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><h4 id="node-1003-节点"><a href="#node-1003-节点" class="headerlink" title="node-1003 节点"></a>node-1003 节点</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#节点 3 的配置信息：</span></span><br><span class="line"><span class="comment">#集群名称，节点之间要保持一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-elasticsearch</span></span><br><span class="line"><span class="comment">#节点名称，集群内要唯一</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1003</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#ip 地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="comment">#http 端口</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">1003</span></span><br><span class="line"><span class="comment">#tcp 监听端口</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9303</span></span><br><span class="line"><span class="comment">#候选主节点的地址，在开启服务后可以被选为主节点</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["localhost:9301",</span> <span class="string">"localhost:9302"</span><span class="string">]</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">1m</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br><span class="line"><span class="comment">#集群内的可以被选为主节点的节点列表</span></span><br><span class="line"><span class="comment">#cluster.initial_master_nodes: ["node-1", "node-2","node-3"]</span></span><br><span class="line"><span class="comment">#跨域配置</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><h4 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h4><ol><li><code>GET http://127.0.0.1:1001/_cluster/health</code></li><li><code>GET http://127.0.0.1:1002/_cluster/health</code></li><li><code>GET http://127.0.0.1:1003/_cluster/health</code></li></ol><p><strong>status字段</strong>指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p><ol><li>green：所有的主分片和副本分片都正常运行。</li><li>yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行。</li><li>red：有主分片没能正常运行。</li></ol><h1 id="15-进阶-核心概念"><a href="#15-进阶-核心概念" class="headerlink" title="15 进阶-核心概念"></a>15 进阶-核心概念</h1><h3 id="索引Index"><a href="#索引Index" class="headerlink" title="索引Index"></a>索引Index</h3><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除（CRUD）的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p><p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录就是索引的意思，目录可以提高查询速度。</p><p><strong>Elasticsearch 索引的精髓：一切设计都是为了提高搜索的性能。</strong></p><h3 id="类型Type"><a href="#类型Type" class="headerlink" title="类型Type"></a>类型Type</h3><p>在一个索引中，你可以定义一种或多种类型。</p><p>一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。不同的版本，类型发生了不同的变化。</p><h3 id="文档Document"><a href="#文档Document" class="headerlink" title="文档Document"></a>文档Document</h3><p>一个文档是一个可被索引的基础信息单元，也就是一条数据。</p><p>比如：你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以 JSON（Javascript Object Notation）格式来表示，而 JSON 是一个到处存在的互联网数据交互格式。</p><p>在一个 index/type 里面，你可以存储任意多的文档。</p><h3 id="字段Field"><a href="#字段Field" class="headerlink" title="字段Field"></a>字段Field</h3><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识。</p><h3 id="映射Mapping"><a href="#映射Mapping" class="headerlink" title="映射Mapping"></a>映射Mapping</h3><p>mapping 是处理数据的方式和规则方面做一些限制，如：某个字段的数据类型、默认值、分析器、是否被索引等等。这些都是映射里面可以设置的，其它就是处理 ES 里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h3 id="分片Shards"><a href="#分片Shards" class="headerlink" title="分片Shards"></a>分片Shards</h3><p>一个索引可以存储超出单个节点硬件限制的大量数据。比如，一个具有 10 亿文档数据<br>的索引占据 1TB 的磁盘空间，而任一节点都可能没有这样大的磁盘空间。 或者单个节点处理搜索请求，响应太慢。为了解决这个问题，<strong>Elasticsearch 提供了将索引划分成多份的能力，每一份就称之为分片。</strong>当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。</p><p>分片很重要，主要有两方面的原因：</p><ul><li>允许你水平分割 / 扩展你的内容容量。</li><li>允许你在分片之上进行分布式的、并行的操作，进而提高性能/吞吐量。</li></ul><p>至于一个分片怎样分布，它的文档怎样聚合和搜索请求，是完全由 Elasticsearch 管理的，对于作为用户的你来说，这些都是透明的，无需过分关心。</p><p>被混淆的概念是，一个 Lucene 索引 我们在 Elasticsearch 称作 分片 。 一个Elasticsearch 索引 是分片的集合。 当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片（Lucene 索引），然后合并每个分片的结果到一个全局的结果集。</p><p>Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言， Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。但 Lucene 只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来进行应用。</p><p>目前市面上流行的搜索引擎软件，主流的就两款： Elasticsearch 和 Solr,这两款都是基于 Lucene 搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作 修改、添加、保存、查询等等都十分类似。</p><h3 id="副本Replicas"><a href="#副本Replicas" class="headerlink" title="副本Replicas"></a>副本Replicas</h3><p>在一个网络 / 云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的， Elasticsearch 允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片(副本)。</p><p>复制分片之所以重要，有两个主要原因：</p><ul><li>在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。</li><li>扩展你的搜索量/吞吐量，因为搜索可以在所有的副本上并行运行。</li></ul><p>总之，每个索引可以被分成多个分片。一个索引也可以被复制 0 次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。</p><p>分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p><p>默认情况下，Elasticsearch 中的每个索引被分片 1 个主分片和 1 个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有 1 个主分片和另外 1 个复制分片（1 个完全拷贝），这样的话每个索引总共就有 2 个分片， 我们需要根据索引需要确定分片个数。</p><h3 id="分配Allocation"><a href="#分配Allocation" class="headerlink" title="分配Allocation"></a>分配Allocation</h3><p>将分片分配给某个节点的过程，包括分配主分片或者副本。如果是副本，还包含从主分片复制数据的过程。这个过程是由 master 节点完成的。</p><h1 id="16-进阶-系统架构"><a href="#16-进阶-系统架构" class="headerlink" title="16 进阶 - 系统架构"></a>16 进阶 - 系统架构</h1><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232433191.png" alt="image-20221004232433191"></p><p>一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p><p>当一个节点被选举成为主节点时， 它将负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。 而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。</p><p>作为用户，我们可以将请求发送到集群中的任何节点 ，包括主节点。 每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。</p><h1 id="17-进阶-单节点集群-故障转移-水平扩容"><a href="#17-进阶-单节点集群-故障转移-水平扩容" class="headerlink" title="17 进阶 - 单节点集群 / 故障转移 / 水平扩容"></a>17 进阶 - 单节点集群 / 故障转移 / 水平扩容</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#PUT http://127.0.0.1:1001/users</span><br><span class="line"><span class="comment">// 每个主分片拥有一个副本分片</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span> : &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span> : <span class="number">3</span>, <span class="comment">//  3 个主分片</span></span><br><span class="line">        <span class="attr">"number_of_replicas"</span> : <span class="number">1</span> <span class="comment">// 1个副本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（1）集群是单节点-所有3个主分片都被分配到了node-1"><a href="#（1）集群是单节点-所有3个主分片都被分配到了node-1" class="headerlink" title="（1）集群是单节点  所有3个主分片都被分配到了node-1"></a>（1）集群是单节点  所有3个主分片都被分配到了node-1</h3><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232519593.png" alt="image-20221004232519593"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 个副本分片都是 Unassigned，它们都没有被分配到任何节点。 在同 一个节点上既保存原始数据又保存副本是没有意义的，因为一旦失去了那个节点，我们也将丢失该节点 上的所有副本数据。</span><br></pre></td></tr></table></figure><h3 id="（2）故障转移"><a href="#（2）故障转移" class="headerlink" title="（2）故障转移"></a>（2）故障转移</h3><p>当集群中只有一个节点在运行时，意味着会有一个单点故障问题——没有冗余。 </p><p>幸运的是，我们只需再启动一个节点即可防止数据丢失。</p><p>当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。之所以配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的节点才会自动组成集群。</p><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232556666.png" alt="image-20221004232556666"></p><h3 id="（3）水平扩容"><a href="#（3）水平扩容" class="headerlink" title="（3）水平扩容"></a>（3）水平扩容</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#PUT http://127.0.0.1:1001/users/_settings</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"number_of_replicas"</span> : <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232703746.png" alt="image-20221004232703746"></p><h3 id="4-应对故障"><a href="#4-应对故障" class="headerlink" title="(4) 应对故障"></a>(4) 应对故障</h3><p>集群可以将缺失的副本分片再次进行分配，那么集群的状态也将恢复成之前的状态。 如果 Node 1 依然拥有着之前的分片，它将尝试去重用它们，同时仅从主分片复制发生了修改的数据文件。和之前的集群相比，只是 Master 节点切换了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若NODE-1停止了 确保有如下配置，会恢复之前的状态进行再次分配，只是不再是master了</span></span><br><span class="line">discovery.seed_hosts: ["localhost:9302", "localhost:9303"]</span><br></pre></td></tr></table></figure><h1 id="18-进阶-路由计算-分片控制"><a href="#18-进阶-路由计算-分片控制" class="headerlink" title="18 进阶 - 路由计算  分片控制"></a>18 进阶 - 路由计算  分片控制</h1><h3 id="（1）路由计算-：-当创建索引时是根据公式决定放到哪个片分中的"><a href="#（1）路由计算-：-当创建索引时是根据公式决定放到哪个片分中的" class="headerlink" title="（1）路由计算 ： 当创建索引时是根据公式决定放到哪个片分中的"></a>（1）路由计算 ： 当创建索引时是根据公式决定放到哪个片分中的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shard = hash(routing) % number_of_primary_shards</span><br><span class="line"><span class="comment">// routing 是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。 routing 通过hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量）后得到余数 。这个分布在 0 到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。</span></span><br></pre></td></tr></table></figure><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232904161.png" alt="image-20221004232904161"></p><h3 id="（2）分片控制"><a href="#（2）分片控制" class="headerlink" title="（2）分片控制"></a>（2）分片控制</h3><p>我们可以发送请求到集群中的任一节点。每个节点都有能力处理任意请求。每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。在下面的例子中，如果将所有的请求发送到Node 1001，我们将其称为协调节点coordinating node 协调节点。</p><p>当发送请求的时候， 为了扩展负载，更好的做法是轮询集群中所有的节点。</p><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232918905.png" alt="image-20221004232918905"></p><h3 id="（3）数据写流程"><a href="#（3）数据写流程" class="headerlink" title="（3）数据写流程"></a>（3）数据写流程</h3><p>新建、索引和删除 都是写操作，必须在主分片完成后才会被复制到相关的副本分片上。</p><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232930005.png" alt="image-20221004232930005"></p><h3 id="（4）数据读流程"><a href="#（4）数据读流程" class="headerlink" title="（4）数据读流程"></a>（4）数据读流程</h3><p>在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。</p><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232946528.png" alt="image-20221004232946528"></p><h3 id="（5）更新流程"><a href="#（5）更新流程" class="headerlink" title="（5）更新流程"></a>（5）更新流程</h3><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004232959119.png" alt="image-20221004232959119"></p><h3 id="（6）批量操作流程"><a href="#（6）批量操作流程" class="headerlink" title="（6）批量操作流程"></a>（6）批量操作流程</h3><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004233017141.png" alt="image-20221004233017141"></p><p><img src="/Users/marong/Project/marongrong.com/mrr3000gihub/themes/pure/source/images/blog/image-20221004233027259.png" alt="image-20221004233027259"></p><h1 id="19-进阶-倒排索引"><a href="#19-进阶-倒排索引" class="headerlink" title="19 进阶 - 倒排索引"></a>19 进阶 - 倒排索引</h1><p>分片是Elasticsearch最小的工作单元。但是究竟什么是一个分片，它是如何工作的？</p><p>传统的数据库每个字段存储单个值，但这对全文检索并不够。文本字段中的每个单词需要被搜索，对数据库意味着需要单个字段有索引多值的能力。最好的支持是一个字段多个值需求的数据结构是<strong>倒排索引</strong>。</p><h3 id="倒排索引原理"><a href="#倒排索引原理" class="headerlink" title="倒排索引原理"></a>倒排索引原理</h3><p>Elasticsearch使用一种称为倒排索引的结构，它适用于快速的全文搜索。</p><p>见其名，知其意，有倒排索引，肯定会对应有正向索引。正向索引（forward index），反向索引（inverted index）更熟悉的名字是<strong>倒排索引</strong>。</p><p>所谓的<strong>正向索引</strong>，就是搜索引擎会将待搜索的文件都对应一个文件ID，搜索时将这个ID和搜索关键字进行对应，形成K-V对，然后对关键字进行统计计数。</p><h1 id="20-进阶-文档分析"><a href="#20-进阶-文档分析" class="headerlink" title="20 进阶 - 文档分析"></a>20 进阶 - 文档分析</h1><h3 id="（1）分析包含下面的过程："><a href="#（1）分析包含下面的过程：" class="headerlink" title="（1）分析包含下面的过程："></a>（1）分析包含下面的过程：</h3><ul><li>将一块文本分成适合于倒排索引的独立的词条。</li><li>将这些词条统一化为标准格式以提高它们的“可搜索性”，或者recall。</li></ul><h3 id="（2）分析器执行上面的工作。分析器实际上是将三个功能封装到了一个包里"><a href="#（2）分析器执行上面的工作。分析器实际上是将三个功能封装到了一个包里" class="headerlink" title="（2）分析器执行上面的工作。分析器实际上是将三个功能封装到了一个包里"></a>（2）分析器执行上面的工作。分析器实际上是将三个功能封装到了一个包里</h3><ul><li>字符过滤器：首先，字符串按顺序通过每个 字符过滤器 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉 HTML，或者将 &amp; 转化成 and。</li><li>分词器：其次，字符串被分词器分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</li><li>Token 过滤器：最后，词条按顺序通过每个 token 过滤器 。这个过程可能会改变词条（例如，小写化Quick ），删除词条（例如， 像 a， and， the 等无用词），或者增加词条（例如，像jump和leap这种同义词）</li></ul><h3 id="（3）内置分析器"><a href="#（3）内置分析器" class="headerlink" title="（3）内置分析器"></a>（3）内置分析器</h3><p>Elasticsearch还附带了可以直接使用的预包装的分析器。接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Set the shape to semi-transparent by calling set_trans(5)&quot;</span><br></pre></td></tr></table></figure><ul><li>标准分析器<br>标准分析器是Elasticsearch 默认使用的分析器。它是分析各种语言文本最常用的选择。它根据Unicode 联盟定义的单词边界划分文本。删除绝大部分标点。最后，将词条小写。它会产生：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set, the, shape, to, semi, transparent, by, calling, set_trans, 5</span><br></pre></td></tr></table></figure><ul><li>简单分析器<br>简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set, the, shape, to, semi, transparent, by, calling, set, trans</span><br></pre></td></tr></table></figure><ul><li>空格分析器<br>空格分析器在空格的地方划分文本。它会产生:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</span><br></pre></td></tr></table></figure><ul><li>语言分析器<br>特定语言分析器可用于很多语言。它们可以考虑指定语言的特点。例如，英语分析器附带了一组英语无用词（常用单词，例如and或者the ,它们对相关性没有多少影响），它们会被删除。由于理解英语语法的规则，这个分词器可以提取英语单词的词干。</li></ul><p>英语分词器会产生下面的词条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set, shape, semi, transpar, call, set_tran, 5</span><br></pre></td></tr></table></figure><p>注意看transparent、calling和 set_trans已经变为词根格式。</p><h3 id="（4）-分析器使用场景"><a href="#（4）-分析器使用场景" class="headerlink" title="（4） 分析器使用场景"></a>（4） 分析器使用场景</h3><ul><li>当你查询一个全文域时，会对查询字符串应用相同的分析器，以产生正确的搜索词条列表。</li><li>当你查询一个精确值域时，不会分析查询字符串，而是搜索你指定的精确值。</li></ul><h3 id="（5）指定分析器"><a href="#（5）指定分析器" class="headerlink" title="（5）指定分析器"></a>（5）指定分析器</h3><p>当Elasticsearch在你的文档中检测到一个新的字符串域，它会自动设置其为一个全文字符串域，使用 标准 分析器对它进行分析。你不希望总是这样。可能你想使用一个不同的分析器，适用于你的数据使用的语言。有时候你想要一个字符串域就是一个字符串域，不使用分析，直接索引你传入的精确值，例如用户 ID 或者一个内部的状态域或标签。要做到这一点，我们必须手动指定这些域的映射。</p><p>（细粒度指定分析器）</p><h3 id="（6）IK分词器"><a href="#（6）IK分词器" class="headerlink" title="（6）IK分词器"></a>（6）IK分词器</h3><p>安装插件后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GET http://localhost:9200/_analyze</span></span><br><span class="line">&#123;</span><br><span class="line">"text":"测试单词",</span><br><span class="line">"analyzer":"ik_max_word"</span><br><span class="line">&#125;</span><br><span class="line">// ik_max_word：会将文本做最细粒度的拆分。</span><br><span class="line">// ik_smart：会将文本做最粗粒度的拆分。</span><br></pre></td></tr></table></figure><h5 id="扩展词汇"><a href="#扩展词汇" class="headerlink" title="扩展词汇"></a>扩展词汇</h5><ol><li>首先进入 ES 根目录中的 plugins 文件夹下的 ik 文件夹，进入 config 目录，创建 custom.dic文件，写入“弗雷尔卓德”。</li><li>同时打开 IKAnalyzer.cfg.xml 文件，将新建的 custom.dic 配置其中。</li><li>重启 ES 服务器 。</li></ol><h3 id="（7）自定义分析器"><a href="#（7）自定义分析器" class="headerlink" title="（7）自定义分析器"></a>（7）自定义分析器</h3><p>虽然Elasticsearch带有一些现成的分析器，然而在分析器上Elasticsearch真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。在分析与分析器我们说过，一个分析器就是在一个包里面组合了三种函数的一个包装器，三种函数按照顺序被执行：</p><ul><li><p>字符过滤器<br>字符过滤器用来整理一个尚未被分词的字符串。例如，如果我们的文本是HTML格式的，它会包含像<p>或者<div>这样的HTML标签，这些标签是我们不想索引的。我们可以使用html清除字符过滤器来移除掉所有的HTML标签，并且像把&Aacute;转换为相对应的Unicode字符Á 这样，转换HTML实体。一个分析器可能有0个或者多个字符过滤器。</p></li><li><p>分词器<br>一个分析器必须有一个唯一的分词器。分词器把字符串分解成单个词条或者词汇单元。标准分析器里使用的标准分词器把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p></li></ul><p>​        例如，关键词分词器完整地输出接收到的同样的字符串，并不做任何分词。空格分词器只根据空格分割文本。正则分词器根据匹配正则表达式来分割文本。</p><ul><li>词单元过滤器<br>经过分词，作为结果的词单元流会按照指定的顺序通过指定的词单元过滤器。词单元过滤器可以修改、添加或者移除词单元。我们已经提到过lowercase和stop词过滤器，但是在Elasticsearch 里面还有很多可供选择的词单元过滤器。词干过滤器把单词遏制为词干。ascii_folding过滤器移除变音符，把一个像”très”这样的词转换为“tres”。</li></ul><p>​        ngram和 edge_ngram词单元过滤器可以产生适合用于部分匹配或者自动补全的词单元。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># 自定义创建分析器例子</span><br><span class="line">#PUT http://localhost:9200/my_index</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">            <span class="attr">"char_filter"</span>: &#123;</span><br><span class="line">                <span class="attr">"&amp;_to_and"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"mapping"</span>, </span><br><span class="line">                    <span class="attr">"mappings"</span>: [</span><br><span class="line">                        <span class="string">"&amp;=&gt; and "</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, </span><br><span class="line">            <span class="attr">"filter"</span>: &#123;</span><br><span class="line">                <span class="attr">"my_stopwords"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"stop"</span>, </span><br><span class="line">                    <span class="attr">"stopwords"</span>: [</span><br><span class="line">                        <span class="string">"the"</span>, </span><br><span class="line">                        <span class="string">"a"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, </span><br><span class="line">            <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line">                <span class="attr">"my_analyzer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"custom"</span>, </span><br><span class="line">                    <span class="attr">"char_filter"</span>: [</span><br><span class="line">                        <span class="string">"html_strip"</span>, </span><br><span class="line">                        <span class="string">"&amp;_to_and"</span></span><br><span class="line">                    ], </span><br><span class="line">                    <span class="attr">"tokenizer"</span>: <span class="string">"standard"</span>, </span><br><span class="line">                    <span class="attr">"filter"</span>: [</span><br><span class="line">                        <span class="string">"lowercase"</span>, </span><br><span class="line">                        <span class="string">"my_stopwords"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建后使用</span></span><br><span class="line"># GET http://127.0.0.1:9200/my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"text"</span>:<span class="string">"The quick &amp; brown fox"</span>,</span><br><span class="line">    <span class="attr">"analyzer"</span>: <span class="string">"my_analyzer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="21-进阶-文档控制"><a href="#21-进阶-文档控制" class="headerlink" title="21 进阶 - 文档控制"></a>21 进阶 - 文档控制</h1><h3 id="文档冲突"><a href="#文档冲突" class="headerlink" title="文档冲突"></a>文档冲突</h3><p>当我们使用index API更新文档，可以一次性读取原始文档，做我们的修改，然后重新索引整个文档。最近的索引请求将获胜：无论最后哪一个文档被索引，都将被唯一存储在 Elasticsearch 中。如果其他人同时更改这个文档，他们的更改将丢失。</p><h3 id="悲观并发控制"><a href="#悲观并发控制" class="headerlink" title="悲观并发控制"></a>悲观并发控制</h3><p>这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。一个典型的例子是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。</p><h3 id="乐观并发控制"><a href="#乐观并发控制" class="headerlink" title="乐观并发控制"></a>乐观并发控制</h3><p>Elasticsearch 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何解决冲突。例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。</p><h1 id="22-优化-硬件选择"><a href="#22-优化-硬件选择" class="headerlink" title="22 优化 - 硬件选择"></a>22 优化 - 硬件选择</h1><p>Elasticsearch 的基础是 Lucene，所有的索引和文档数据是存储在本地的磁盘中，具体的路径可在 ES 的配置文件…/config/elasticsearch.yml中配置，如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/path/to/data</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to log files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/path/to/logs</span></span><br></pre></td></tr></table></figure><p>磁盘在现代服务器上通常都是瓶颈。Elasticsearch重度使用磁盘，你的磁盘能处理的吞吐量越大，你的节点就越稳定。这里有一些优化磁盘I/O的技巧：</p><ul><li>使用SSD就像其他地方提过的，他们比机械磁盘优秀多了。</li><li>使用RAID0。条带化RAID会提高磁盘IO，代价显然就是当一块硬盘故障时整个就故障了。不要使用镜像或者奇偶校验RAID，因为副本已经提供了这个功能。</li><li>另外，使用多块硬盘，并允许Elasticsearch 通过多个path data目录配置把数据条带化分配到它们上面。</li><li>不要使用远程挂载的存储，比如NFS或者SMB/CIFS。这个引入的延迟对性能来说完全是背道而驰的。</li></ul><h1 id="23-优化-分片策略"><a href="#23-优化-分片策略" class="headerlink" title="23 优化 - 分片策略"></a>23 优化 - 分片策略</h1><h3 id="合理设置分片数"><a href="#合理设置分片数" class="headerlink" title="合理设置分片数"></a>合理设置分片数</h3><p>分片和副本的设计为 ES 提供了支持分布式和故障转移的特性，但并不意味着分片和副本是可以无限分配的。而且索引的分片完成分配后由于索引的路由机制，我们是不能重新修改分片数的。</p><p>可能有人会说，我不知道这个索引将来会变得多大，并且过后我也不能更改索引的大小，所以为了保险起见，还是给它设为 1000 个分片吧。但是需要知道的是，一个分片并不是没有代价的。需要了解：</p><ul><li>一个分片的底层即为一个 Lucene 索引，会消耗一定文件句柄、内存、以及 CPU运转。</li><li>每一个搜索请求都需要命中索引中的每一个分片，如果每一个分片都处于不同的节点还好， 但如果多个分片都需要在同一个节点上竞争使用相同的资源就有些糟糕了。</li><li>用于计算相关度的词项统计信息是基于分片的。如果有许多分片，每一个都只有很少的数据会导致很低的相关度。</li></ul><p>一个业务索引具体需要分配多少分片可能需要架构师和技术人员对业务的增长有个预先的判断，横向扩展应当分阶段进行。为下一阶段准备好足够的资源。 只有当你进入到下一个阶段，你才有时间思考需要作出哪些改变来达到这个阶段。一般来说，我们遵循一些原则：</p><ul><li>控制每个分片占用的硬盘容量不超过 ES 的最大 JVM 的堆空间设置（一般设置不超过 32G，参考下文的 JVM 设置原则），因此，如果索引的总容量在 500G 左右，那分片大小在 16 个左右即可；当然，最好同时考虑原则 2。</li><li>考虑一下 node 数量，一般一个节点有时候就是一台物理机，如果分片数过多，大大超过了节点数，很可能会导致一个节点上存在多个分片，一旦该节点故障，即使保持了 1 个以上的副本，同样有可能会导致数据丢失，集群无法恢复。所以， 一般都设置分片数不超过节点数的 3 倍。</li><li>主分片，副本和节点最大数之间数量，我们分配的时候可以参考以下关系：<br>节点数&lt;=主分片数 *（副本数+1）</li></ul><h3 id="推迟分片分配"><a href="#推迟分片分配" class="headerlink" title="推迟分片分配"></a>推迟分片分配</h3><p>对于节点瞬时中断的问题，默认情况，集群会等待一分钟来查看节点是否会重新加入，如果这个节点在此期间重新加入，重新加入的节点会保持其现有的分片数据，不会触发新的分片分配。这样就可以减少 ES 在自动再平衡可用分片时所带来的极大开销。</p><p>通过修改参数 delayed_timeout ，可以延长再均衡的时间，可以全局设置也可以在索引级别进行修改：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#PUT /_all/_settings</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"settings"</span>: &#123;</span><br><span class="line"><span class="attr">"index.unassigned.node_left.delayed_timeout"</span>: <span class="string">"5m"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="24-优化-路由选择"><a href="#24-优化-路由选择" class="headerlink" title="24 优化 - 路由选择"></a>24 优化 - 路由选择</h1><p>当我们查询文档的时候， Elasticsearch 如何知道一个文档应该存放到哪个分片中呢？它其实是通过下面这个公式来计算出来：</p><p><strong>shard = hash(routing) % number_of_primary_shards</strong></p><p>routing 默认值是文档的 id，也可以采用自定义值，比如用户 id。</p><h3 id="不带routing查询"><a href="#不带routing查询" class="headerlink" title="不带routing查询"></a>不带routing查询</h3><p>在查询的时候因为不知道要查询的数据具体在哪个分片上，所以整个过程分为2个步骤</p><ul><li>分发：请求到达协调节点后，协调节点将查询请求分发到每个分片上。</li><li>聚合：协调节点搜集到每个分片上查询结果，在将查询的结果进行排序，之后给用户返回结果。</li></ul><h3 id="带routing查询"><a href="#带routing查询" class="headerlink" title="带routing查询"></a>带routing查询</h3><p>查询的时候，可以直接根据routing 信息定位到某个分配查询，不需要查询所有的分配，经过协调节点排序。向上面自定义的用户查询，如果routing 设置为userid 的话，就可以直接查询出数据来，效率提升很多。</p><h1 id="25-优化-写入速度优化"><a href="#25-优化-写入速度优化" class="headerlink" title="25 优化 - 写入速度优化"></a>25 优化 - 写入速度优化</h1><p>针对于搜索性能要求不高，但是对写入要求较高的场景，我们需要尽可能的选择恰当写优化策略。综合来说，可以考虑以下几个方面来提升写索引的性能：</p><ul><li>加大Translog Flush，目的是降低Iops、Writeblock。</li><li>增加Index Refesh间隔，目的是减少Segment Merge的次数。</li><li>调整Bulk 线程池和队列。</li><li>优化节点间的任务分布。</li><li>优化Lucene层的索引建立，目的是降低CPU及IO。</li><li>优化存储设备</li><li>ES 是一种密集使用磁盘的应用，在段合并的时候会频繁操作磁盘，所以对磁盘要求较高，当磁盘速度提升之后，集群的整体性能会大幅度提高。</li></ul><h3 id="合理使用合并"><a href="#合理使用合并" class="headerlink" title="合理使用合并"></a>合理使用合并</h3><p>Lucene 以段的形式存储数据。当有新的数据写入索引时， Lucene 就会自动创建一个新的段。</p><p>随着数据量的变化，段的数量会越来越多，消耗的多文件句柄数及 CPU 就越多，查询效率就会下降。</p><p>由于 Lucene 段合并的计算量庞大，会消耗大量的 I/O，所以 ES 默认采用较保守的策略，让后台定期进行段合并。</p><h3 id="减少-Refresh-的次数"><a href="#减少-Refresh-的次数" class="headerlink" title="减少 Refresh 的次数"></a>减少 Refresh 的次数</h3><p>Lucene 在新增数据时，采用了延迟写入的策略，默认情况下索引的refresh_interval 为1 秒。</p><p>Lucene 将待写入的数据先写到内存中，超过 1 秒（默认）时就会触发一次 Refresh，然后 Refresh 会把内存中的的数据刷新到操作系统的文件缓存系统中。</p><p>如果我们对搜索的实效性要求不高，可以将 Refresh 周期延长，例如 30 秒。</p><p>这样还可以有效地减少段刷新次数，但这同时意味着需要消耗更多的 Heap 内存。</p><h3 id="加大-Flush-设置"><a href="#加大-Flush-设置" class="headerlink" title="加大 Flush 设置"></a>加大 Flush 设置</h3><p>Flush 的主要目的是把文件缓存系统中的段持久化到硬盘，当 Translog 的数据量达到 512MB 或者 30 分钟时，会触发一次 Flush。</p><p>index.translog.flush_threshold_size 参数的默认值是 512MB，我们进行修改。</p><p>增加参数值意味着文件缓存系统中可能需要存储更多的数据，所以我们需要为操作系统的文件缓存系统留下足够的空间。</p><h3 id="减少副本的数量"><a href="#减少副本的数量" class="headerlink" title="减少副本的数量"></a>减少副本的数量</h3><p>ES 为了保证集群的可用性，提供了 Replicas（副本）支持，然而每个副本也会执行分析、索引及可能的合并过程，所以 Replicas 的数量会严重影响写索引的效率。</p><p>当写索引时，需要把写入的数据都同步到副本节点，副本节点越多，写索引的效率就越慢。</p><p>如果我们需要大批量进行写入操作，可以先禁止Replica复制，设置<br>index.number_of_replicas: 0 关闭副本。在写入完成后， Replica 修改回正常的状态。</p><h1 id="26-优化-内存设置"><a href="#26-优化-内存设置" class="headerlink" title="26 优化 - 内存设置"></a>26 优化 - 内存设置</h1><p>因为 ES 堆内存的分配需要满足以下<strong>两个原则</strong>：</p><ul><li><p>不要超过物理内存的 50%： Lucene 的设计目的是把底层 OS 里的数据缓存到内存中。Lucene 的段是分别存储到单个文件中的，这些文件都是不会变化的，所以很利于缓存，同时操作系统也会把这些段文件缓存起来，以便更快的访问。如果我们设置的堆内存过大， Lucene 可用的内存将会减少，就会严重影响降低 Lucene 的全文本查询性能。</p></li><li><p>堆内存的大小最好不要超过 32GB：在 Java 中，所有对象都分配在堆上，然后有一个 Klass Pointer 指针指向它的类元数据。这个指针在 64 位的操作系统上为 64 位， 64 位的操作系统可以使用更多的内存（2^64）。在 32 位<br>的系统上为 32 位， 32 位的操作系统的最大寻址空间为 4GB（2^32）。<br>但是 64 位的指针意味着更大的浪费，因为你的指针本身大了。浪费内存不算，更糟糕的是，更大的指针在主内存和缓存器（例如 LLC, L1 等）之间移动数据的时候，会占用更多的带宽。</p></li></ul><p><strong>最终我们都会采用 31 G 设置</strong></p><ul><li>-Xms 31g</li><li>-Xmx 31g</li></ul><h1 id="27-优化-重要配置"><a href="#27-优化-重要配置" class="headerlink" title="27 优化 - 重要配置"></a>27 优化 - 重要配置</h1><table><thead><tr><th>参数名</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>cluster.name</td><td>elasticsearch</td><td>配置 ES 的集群名称，默认值是 ES，建议改成与所存数据相关的名称， ES 会自动发现在同一网段下的 集群名称相同的节点。</td></tr><tr><td>node.name</td><td>node-1</td><td>集群中的节点名，在同一个集群中不能重复。节点 的名称一旦设置，就不能再改变了。当然，也可以 设 置 成 服 务 器 的 主 机 名 称 ， 例 如 node.name:${HOSTNAME}。</td></tr><tr><td>node.master</td><td>true</td><td>指定该节点是否有资格被选举成为 Master 节点，默 认是 True，如果被设置为 True，则只是有资格成为 Master 节点，具体能否成为 Master 节点，需要通 过选举产生。</td></tr><tr><td>node.data</td><td>true</td><td>指定该节点是否存储索引数据，默认为 True。数据 的增、删、改、查都是在 Data 节点完成的。</td></tr><tr><td>index.number_of_shards</td><td>1</td><td>设置都索引分片个数，默认是 1 片。也可以在创建 索引时设置该值，具体设置为多大都值要根据数据 量的大小来定。如果数据量不大，则设置成 1 时效 率最高</td></tr><tr><td>index.number_of_replicas</td><td>1</td><td>设置默认的索引副本个数，默认为 1 个。副本数越 多，集群的可用性越好，但是写索引时需要同步的 数据越多。</td></tr><tr><td>transport.tcp.compress</td><td>true</td><td>设置在节点间传输数据时是否压缩，默认为 False， 不压缩</td></tr><tr><td>discovery.zen.minimum_master_nodes</td><td>1</td><td>设置在选举 Master 节点时需要参与的最少的候选 主节点数，默认为 1。如果使用默认值，则当网络 不稳定时有可能会出现脑裂。 合 理 的 数 值 为 (master_eligible_nodes/2)+1 ， 其 中 master_eligible_nodes 表示集群中的候选主节点数</td></tr><tr><td>discovery.zen.ping.timeout</td><td>3s</td><td>设置在集群中自动发现其他节点时 Ping 连接的超 时时间，默认为 3 秒。 在较差的网络环境下需要设置得大一点，防止因误 判该节点的存活状态而导致分片的转移</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;01-开篇&quot;&gt;&lt;a href=&quot;#01-开篇&quot; class=&quot;headerlink&quot; title=&quot;01 开篇&quot;&gt;&lt;/a&gt;01 开篇&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;结构化数据 mysql&lt;/li&gt;
&lt;li&gt;非结构化数据 视频 图表 图片&lt;/li&gt;
&lt;li&gt;半结构化数据
      
    
    </summary>
    
    
    
      <category term="es" scheme="http://yoursite.com/tags/es/"/>
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="elastic" scheme="http://yoursite.com/tags/elastic/"/>
    
  </entry>
  
  <entry>
    <title>WebGL编程指南</title>
    <link href="http://yoursite.com/2022/10/03/book/2022/WebGL%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2022/10/03/book/2022/WebGL%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</id>
    <published>2022-10-03T02:00:00.000Z</published>
    <updated>2022-10-03T02:58:25.215Z</updated>
    
    <content type="html"><![CDATA[<p>`</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;`&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="WebGL" scheme="http://yoursite.com/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>HTTP图解</title>
    <link href="http://yoursite.com/2022/09/30/book/2022/HTTP%E5%9B%BE%E8%A7%A3/"/>
    <id>http://yoursite.com/2022/09/30/book/2022/HTTP%E5%9B%BE%E8%A7%A3/</id>
    <published>2022-09-30T02:00:00.000Z</published>
    <updated>2022-10-02T01:41:35.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、网络基础"><a href="#一、网络基础" class="headerlink" title="一、网络基础"></a>一、网络基础</h1><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><ul><li>网络基础，互联 网相关的各类协议族的总称</li><li>应用层(FTP)、传输层(TCP  UDP)、网络层(数据包IP)、数据链路层(网卡NIC)</li><li>URI统一资源标识符  URL统一资源定位符 </li></ul><h1 id="二、HTTP协议"><a href="#二、HTTP协议" class="headerlink" title="二、HTTP协议"></a>二、HTTP协议</h1><ul><li>http协议用于客户端和服务器端之间的通信</li><li>通过请求和响应的交换达成通信 </li><li>HTTP是不保存状态的协议，stateless无状态协议，不做持久化处理</li><li>通过请求URI定位资源</li><li>HTTP方法：GET请求访问已被URI识别的资源 POST用来传输实体的主体 DELETE删除指定资源 PUT传输文件 OPTIONS询问支持的方法  TRACE追踪路径（不常用，经常被跨站追踪）  CONNECT要求用隧道协议连接代理进行TPC通信（主要使用SSL  TSL）</li><li>持久连接：减少流量  keep-alive；使得多数请求管线化方法同时并行发送多个请求。</li><li>cookie管理状态：请求、响应报文都会协带 </li></ul><h1 id="三、报文内的HTTP信息"><a href="#三、报文内的HTTP信息" class="headerlink" title="三、报文内的HTTP信息"></a>三、报文内的HTTP信息</h1><ul><li>HTTP报文分为 报文首部 和 报文主体</li><li>首部：请求行、状态行、首部字段</li><li>主体：报文message  8位组字节流 + 实体entity （有效载荷数据，包括实体首部+实体主体）</li><li>压缩传输的内容编码：gzip / compress / deflate / identity</li><li>分割发送的分块传输编码</li><li>发送多种数据的多部份对象集合：multipart/form-data    multipart/byteranges</li><li>获取部份内容的范围请求 Range: bytes=5001-10000</li><li>内容协商返回最合适的内容：服务器驱动协商 Server-driven Negotiation 客户端驱动协商 Agent-driven Negotiation 透明协商 Transparent Negotiation</li></ul><h1 id="四、状态码"><a href="#四、状态码" class="headerlink" title="四、状态码"></a>四、状态码</h1><ul><li>1XX  信息性状态码  接收 的请求正在处理</li><li>2XX 成功状态码 请求正常处理完结<ul><li>200  成功处理</li><li>204 NOT Content 服务器接收的请求已成功处理，但在返回响应报文中不含实体的主体部份</li><li>206 Partial Content 客户端进行了范围请求Content-Range，服务器成功执行了这个部份的请求。</li></ul></li><li>3XX 重定向状态码 需要进行附加操作以完成请求<ul><li>301 Moved Permanently 永久性重定向</li><li>302 Found 临时性重定向</li><li>303 See Other 由于请求对应的资源存在着另一个URI，应该使用GET定向获取请求资源</li><li>304 Not Modified 服务器资源未改变，可直接使用客户端未过期的缓存</li><li>307 Temporary Redirect 临时重定向</li></ul></li><li>4XX 客户端错误状态码 服务器无法处理请求<ul><li>401 Unauthorized 请求未通过HTTP认证</li><li>403 Forbidden 对请求资源的访问被服务器拒绝了。未获得文件系统的访问权限。服务器不说明原因。</li><li>404 Not Found 服务器上无法找到请求的资源。服务器不说明原因。</li></ul></li><li>5XX 服务器错误状态码 服务器处理请求出错<ul><li>500 Internal Server Error 临时性故障，在执行请求时发生了错误</li><li>503 Service Unavailable 服务器暂时处于超负载或正在进行停机维护，无法处理请求</li></ul></li></ul><h1 id="五、与HTTP协作的WEB服务器"><a href="#五、与HTTP协作的WEB服务器" class="headerlink" title="五、与HTTP协作的WEB服务器"></a>五、与HTTP协作的WEB服务器</h1><ul><li>用单台虚拟机可以实现绑定多个域名</li><li>通信数据转发程序：<ul><li>代理（一种有转发功能的应用程序，扮演中间人）<ul><li>缓存代理：会预先将资源的副本缓存在代理服务器上</li><li>透明代理：不对报文做任何加工</li><li>非透明代理：对报文做加工处理后再转发</li></ul></li><li>网关（转发其它服务器通信数据的服务器）：具有一定安全信</li><li>隧道（相隔甚远的客户端和服务器两者之间进行中转，保持双方通信连接的应用程序）：更安全，使用SSL，本身不会解析HTTP，保持原样直接转发</li></ul></li><li>保存资源的缓存<ul><li>节省通信流量和时间</li><li>缓存有效期限</li><li>客户端缓存</li></ul></li></ul><h1 id="六、HTTP首部"><a href="#六、HTTP首部" class="headerlink" title="六、HTTP首部"></a>六、HTTP首部</h1><ul><li>HTTP报文首部<ul><li>请求报文：方法、URI、HTTP版本、HTTP首部字段</li><li>响应报文：HTTP版本、状态码、HTTP首部字段</li></ul></li><li>HTTP首部字段<ul><li>HTTP首部字段传递重要信息</li><li>HTTP首部字段结构：（字段名:字段值）</li><li>HTTP首部字段类型：通用首部字段、请求首部字段、响应首部字段、实体首部字段</li><li>非HTTP/1.1首部字段：还有Cookie / Set-Cookie / Content-Disposition</li><li>HTTP首部字段将定义成缓存代理和非缓存代理的行为<ul><li>端到端End-to-end首部：会转发给请求、响应对应的最终接收目标，必须被转发。除以下8个逐跳首部，其它都是端到端。</li><li>逐跳Hop-by-hop首部：只对单次转发有效，会因通过缓存或代理不再转发<ul><li>Connection\Keep-Alive\Proxy-Authenticate\Proxy-Authorization\Trailer\TE\Transfer-Encodeing\Upgrade</li></ul></li></ul></li></ul></li><li>HTTP/1.1通用首部字段<ul><li>Cache-Control 控制缓存行为</li><li>Connection 逐跳首部、连接的管理</li><li>Date 创建报文的日期时间</li><li>Piagma 报文指令</li><li>Trailer 报文末端的首部一览</li><li>Transfer-Encoding 指定报文主体的传输编码方式</li><li>Upgrade 升级为其他协议 </li><li>Via 代理服务器的相关信息</li><li>Warning 错误通知</li></ul></li><li>请求首部字段<ul><li>Accept 用户代理可处理的媒体类型</li><li>Accept-Charset 优先的字符集</li><li>Accept-Encoding 优先的内容编码</li><li>Accept-Language 优先的语言</li><li>Authorization 认证信息</li><li>Expect 期待服务器的特定行为</li><li>From 用户的电子邮箱地址</li><li>Host 请求资源所在的服务器</li><li>If-Match 比较实体标记 ETag</li><li>If-Modified-Since 比较资源的更新时间</li><li>If-None-Match 比较实体标记 与If-Match相反</li><li>If-Range 资源未更新时发送实体Byte的范围请求</li><li>If-Unmodified-Since 比较资源的更新时间 与上面相反</li><li>Max-Forward 最大传输逐跳数</li><li>Proxy-Authorization 代理服务器要求客户端的认证信息</li><li>Range 实体的字节范围请求</li><li>Referer 对请求中的URI的原始获取方</li><li>TE 传输编码的优先级</li><li>User-Agent HTTP客户端的程序信息</li></ul></li><li>响应首部字段<ul><li>Accept-Ranges 是否接受字节范围的请求</li><li>Age 推算资源创建经过的时间</li><li>ETag 资源的匹配信息</li><li>Location 令客户端重定向至指定URI</li><li>Proxy-Authenticate 代理服务器对客户端的认证信息</li><li>Retry-After 对再次发起请求的时机要求</li><li>Server HTTP服务器的安装信息</li><li>Vary 代理服务器缓存的管理信息</li><li>WWW-Authenticate 服务器对客户端的认证信息</li></ul></li><li>实体首部字段<ul><li>Allow 资源可支持的HTTP方法</li><li>Content-Encoding 实体主体适用的编码方式</li><li>Content-Language 实体主体的自然语言</li><li>Content-Length 实体主体的大小 </li><li>Content-Location 替代对应资源的URI</li><li>Content-Md5 实体主体的报文摘要</li><li>Content-Range 实体主体的位置范围</li><li>Content-Type 实体主体的媒体类型</li><li>Expires 实体主体过期 的日期时间</li><li>Last-Modified 资源最后修改的日期旱</li></ul></li><li>为Cookie服务的首部字段<ul><li>Set-Cookie 服务器准备开始管理客户端状态时，会事先告知各种信息</li><li>Cookie</li></ul></li><li>其它首部字段<ul><li>X-Frame-Options 属于响应首部 用于控制网站内容在其它WEB的Frame标签内的显示问题，防止点击劫持</li><li>X-XSS-protechtion 属于响应首部 针对 跨站脚本 攻击XSS的一种对策</li><li>DNT 属于请求首部 拒绝个人信息被收集，拒绝被精准广告追踪的一种方法</li><li>P3P 属于响应首部 个人隐私变成一种仅供程序可理解的形式，达到保护用户隐私</li></ul></li></ul><h1 id="七、确保WEB安全的HTTPS"><a href="#七、确保WEB安全的HTTPS" class="headerlink" title="七、确保WEB安全的HTTPS"></a>七、确保WEB安全的HTTPS</h1><ul><li>HTTP信息窃听（使用明文）身份伪装（不验证通信方身份）篡改（无法证明报文完整性）等安全问题</li><li>防止窃听：使用加密方式<ul><li>通信加密SSL + TLS</li><li>内容加密</li></ul></li><li>防止伪装：查明对方证书</li><li>防止篡改：散列值校验MD5  SHA-1  或 数字签名RSA</li><li>HTTP+加密+认证+完整性保护=HTTPS(混合加密)</li></ul><h1 id="八、确认访问用户身份的认证"><a href="#八、确认访问用户身份的认证" class="headerlink" title="八、确认访问用户身份的认证"></a>八、确认访问用户身份的认证</h1><ul><li>HTTP使用认证方式 <ul><li>BASIC认证（基本认证）</li><li>DIGEST认证（摘要认证）</li><li>SSL客户端认证</li><li>FormBase认证（基于表单认证）：Cookie管理Session会话</li></ul></li></ul><h1 id="九、基于HTTP的功能追加协议"><a href="#九、基于HTTP的功能追加协议" class="headerlink" title="九、基于HTTP的功能追加协议"></a>九、基于HTTP的功能追加协议</h1><ul><li>消除HTTP瓶颈的SPDY，GOOOGLE在2010发布的，缩短WEB页面加载时间50%</li><li>虽然相继出现AJAX，COMET等解决方法</li><li>SPDY的设计，未完全改写HTTP协议，以会话层形式加入，控制对数据的流动，采用HTTP建立通信连接<ul><li>多路复用流</li><li>赋予请求优先级</li><li>压缩HTTP首部</li><li>推送功能</li><li>服务器提示功能</li></ul></li><li>使用浏览器进行全双工通信的WEBSOCKET<ul><li>推送功能</li><li>减少通信量</li></ul></li><li>HTTP/2.0</li></ul><h1 id="十、WEB的攻击技术"><a href="#十、WEB的攻击技术" class="headerlink" title="十、WEB的攻击技术"></a>十、WEB的攻击技术</h1><ul><li>因输出值转义不完全引发的安全漏洞<ul><li>跨站脚本攻击</li><li>SQL注入攻击</li><li>OS命令注入攻击</li><li>HTTP首部注入攻击</li><li>邮件首部注入攻击</li><li>目录遍历攻击</li><li>远程文件 包含漏洞</li></ul></li><li>因设置或设计上的缺陷引发的安全漏洞<ul><li>强制浏览</li><li>不正确的错误消息处理</li><li>开放重定向</li></ul></li><li>因会话管理疏忽引发的安全漏洞<ul><li>会话劫持</li><li>会话固定攻击</li><li>跨站点请求伪造</li></ul></li><li>其它安全漏洞<ul><li>密码破解</li><li>点击劫持</li><li>DOS攻击</li><li>后门程序</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、网络基础&quot;&gt;&lt;a href=&quot;#一、网络基础&quot; class=&quot;headerlink&quot; title=&quot;一、网络基础&quot;&gt;&lt;/a&gt;一、网络基础&lt;/h1&gt;&lt;h4 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="TCP" scheme="http://yoursite.com/tags/TCP/"/>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2022-09】</title>
    <link href="http://yoursite.com/2022/09/30/weeks/2022/2022-09/"/>
    <id>http://yoursite.com/2022/09/30/weeks/2022/2022-09/</id>
    <published>2022-09-30T01:00:00.000Z</published>
    <updated>2022-10-03T02:32:33.205Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzI0MzIyMDM5Ng==&mid=2649849070&idx=1&sn=ad31617f64397a596d5f5d9e93e94b81" target="_blank" rel="noopener">最全面的 Node.js 资源汇总推荐</a></p><p><a href="https://mp.weixin.qq.com/s/LPGEGIzTvy99yL_Jvxrh-Q" target="_blank" rel="noopener">前端知识体系导图</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0MzIyMDM5Ng==&amp;mid=2649849070&amp;idx=1&amp;sn=ad31617f64397a596d5f5d9e93e94b81&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="前端知识体系" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2022-08】</title>
    <link href="http://yoursite.com/2022/08/30/weeks/2022/2022-08/"/>
    <id>http://yoursite.com/2022/08/30/weeks/2022/2022-08/</id>
    <published>2022-08-30T01:00:00.000Z</published>
    <updated>2022-10-03T02:22:11.902Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/3AAP-GnjHykepNcsiKThBA" target="_blank" rel="noopener">Kubernetes原理与架构初探</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/3AAP-GnjHykepNcsiKThBA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kubernetes原理与架构初探&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2022-07】</title>
    <link href="http://yoursite.com/2022/07/30/weeks/2022/2022-07/"/>
    <id>http://yoursite.com/2022/07/30/weeks/2022/2022-07/</id>
    <published>2022-07-30T01:00:00.000Z</published>
    <updated>2022-10-03T02:42:28.943Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/jMFdha5FNqo2lPmyx10SIQ" target="_blank" rel="noopener">使用 WebAssembly 打造定制 JS Runtime</a></p><p><a href="https://mp.weixin.qq.com/s/TI6phB5E4_TZUzac7vZHEQ" target="_blank" rel="noopener">Web 3D 从入门到跑路</a></p><p><a href="https://mp.weixin.qq.com/s/VkK_nFB8FWFvywRKJueyyQ" target="_blank" rel="noopener">你不知道的 Rust</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/jMFdha5FNqo2lPmyx10SIQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用 WebAssembly 打造定制 JS Runtime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a h
      
    
    </summary>
    
    
    
      <category term="rust" scheme="http://yoursite.com/tags/rust/"/>
    
      <category term="webassembly" scheme="http://yoursite.com/tags/webassembly/"/>
    
      <category term="webGL" scheme="http://yoursite.com/tags/webGL/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2022-06】</title>
    <link href="http://yoursite.com/2022/06/30/weeks/2022/2022-06/"/>
    <id>http://yoursite.com/2022/06/30/weeks/2022/2022-06/</id>
    <published>2022-06-30T01:00:00.000Z</published>
    <updated>2022-10-03T02:42:21.651Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/dJ8jeAUVyuDLo8AkxbPTBQ" target="_blank" rel="noopener">深入浅出区块链技术</a></p><p><a href="https://juejin.cn/post/6844903607343513613" target="_blank" rel="noopener">写给前端的区块链开发入门指南：零基础开发基于以太坊智能合约的 ICO DApp</a></p><p><a href="https://mp.weixin.qq.com/s/feo6YuBv4x-UcsLOooLGlA" target="_blank" rel="noopener">QCon 演讲：为什么前端工程师更应该掌握区块链 DApp 开发（上）</a></p><p><a href="https://juejin.cn/post/6844903734837772301" target="_blank" rel="noopener">掘金 AMA：前端 + 区块链的跨界者–CSS魔法聊前端和区块链 DApp</a></p><p><a href="https://juejin.cn/post/6844903575617798157" target="_blank" rel="noopener">【译】用JavaScript写一个区块链</a></p><p><a href="https://juejin.cn/post/6844903541903982606" target="_blank" rel="noopener">区块链入门教程-阮一峰</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/dJ8jeAUVyuDLo8AkxbPTBQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入浅出区块链技术&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.c
      
    
    </summary>
    
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2022-05】</title>
    <link href="http://yoursite.com/2022/05/30/weeks/2022/2022-05/"/>
    <id>http://yoursite.com/2022/05/30/weeks/2022/2022-05/</id>
    <published>2022-05-30T01:00:00.000Z</published>
    <updated>2022-10-03T02:03:30.591Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/nEBp9YYUYFLP8O3xJfbm9A" target="_blank" rel="noopener">8 种技巧让你编写更简洁的 JavaScript 代码</a></p><p><a href="https://juejin.cn/post/7096695346239111199" target="_blank" rel="noopener">1.4w字总结带你重学TypeScript</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/nEBp9YYUYFLP8O3xJfbm9A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;8 种技巧让你编写更简洁的 JavaScript 代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2022-04】</title>
    <link href="http://yoursite.com/2022/04/30/weeks/2022/2022-04/"/>
    <id>http://yoursite.com/2022/04/30/weeks/2022/2022-04/</id>
    <published>2022-04-30T01:00:00.000Z</published>
    <updated>2022-06-05T14:08:41.975Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7085145274200358949" target="_blank" rel="noopener">86张脑图，一口气看完 React </a></p><p><a href="https://juejin.cn/post/7085542534943883301" target="_blank" rel="noopener">2022 年的 React 生态</a></p><p><a href="https://juejin.cn/post/7067342513920540686#comment" target="_blank" rel="noopener">扔掉 Electron，拥抱基于 Rust 开发的 Tauri</a></p><p><a href="https://juejin.cn/post/7079447275755274254" target="_blank" rel="noopener">50 多个提高前端人效率的工具、网站和书籍整理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7085145274200358949&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;86张脑图，一口气看完 React &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin
      
    
    </summary>
    
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>小灰算法</title>
    <link href="http://yoursite.com/2022/04/22/book/2022/%E5%B0%8F%E7%81%B0%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2022/04/22/book/2022/%E5%B0%8F%E7%81%B0%E7%AE%97%E6%B3%95/</id>
    <published>2022-04-22T02:00:00.000Z</published>
    <updated>2022-06-05T14:08:41.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、算法概述"><a href="#一、算法概述" class="headerlink" title="一、算法概述"></a>一、算法概述</h1><h2 id="1-1-算法algorithm和数据结构"><a href="#1-1-算法algorithm和数据结构" class="headerlink" title="1.1 算法algorithm和数据结构"></a>1.1 算法algorithm和数据结构</h2><p>数据结构：线性结构（数组、链表、栈、队列、哈希表）、树、图、其它类型</p><h2 id="1-2-时间复杂度-time-complexity"><a href="#1-2-时间复杂度-time-complexity" class="headerlink" title="1.2 时间复杂度 time complexity"></a>1.2 时间复杂度 time complexity</h2><p>运行时间 ms<br>基本操作执行次数T(n) n是规模</p><ul><li>执行次数是线性的 T(n)=3n  T(n)=O(n)</li><li>执行次数是对数计算的 T(n)=5logn  T(n)=O(logn)</li><li>执行次数是常量 T(n)=2  T(n)=O(1)</li><li>执行次数是多项式 T(n)=0.5n² + 0.5n  T(n)=O(n²)</li></ul><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(n²)</p><h2 id="1-3-空间复杂度-space-complexity"><a href="#1-3-空间复杂度-space-complexity" class="headerlink" title="1.3 空间复杂度 space complexity"></a>1.3 空间复杂度 space complexity</h2><p>占用空间MB</p><ul><li><p>常量空间 O(1) </p></li><li><p>线性空间 O(n)</p></li><li><p>二维空间 O(n²)</p></li><li><p>递归空间 方法调用栈 进栈 出栈 递归深度为n  空间复杂度为O(n)</p></li><li><h1 id="二、数据结构基础"><a href="#二、数据结构基础" class="headerlink" title="二、数据结构基础"></a>二、数据结构基础</h1><h2 id="2-1-数组"><a href="#2-1-数组" class="headerlink" title="2.1 数组"></a>2.1 数组</h2></li><li><p>有限个相同类型的变量所组成的有序集合</p></li><li><p>在内存中顺序存储</p></li><li><p>读取、更新、插入、删除</p></li><li><p>扩容</p><h2 id="2-2-链表"><a href="#2-2-链表" class="headerlink" title="2.2 链表"></a>2.2 链表</h2></li><li><p>在内存中随机存储</p></li><li><p>单向链表-每一个节点包含两部分，一部分是存放数据的变量data，一部分是指向下一个节点的指针next</p></li><li><p>双向链表-还多一个指向前置节点的pre指针</p></li><li><p>查找、更新、插入 首尾中间、删除 首尾中间</p></li></ul><h2 id="2-3-栈和队列"><a href="#2-3-栈和队列" class="headerlink" title="2.3 栈和队列"></a>2.3 栈和队列</h2><ul><li>栈 ： 线性数据结构；先入后出、最后入栈顶、最先入为栈底；出栈、入栈、只有栈顶才能出栈；</li><li>队列：单行隧道；先入先出、出口叫队头、入口叫队尾；入队、出队</li></ul><h2 id="2-4-散列表"><a href="#2-4-散列表" class="headerlink" title="2.4 散列表"></a>2.4 散列表</h2><ul><li>散列表也叫做哈希表 提供了键key值value;写操作put；读操作get；扩容resize</li></ul><h1 id="三、树"><a href="#三、树" class="headerlink" title="三、树"></a>三、树</h1><h2 id="3-1-树和二叉树"><a href="#3-1-树和二叉树" class="headerlink" title="3.1 树和二叉树"></a>3.1 树和二叉树</h2><p>树：是n个节点的有限集，有且仅有一个特定的称为根的节点。</p><p>二叉树：每个节点最多有2个孩子 的节点。左孩子，右孩子 ，顺序固定。</p><p>满二叉树：所有非叶子节点都存在左右孩子 ，并且所有叶子节点都在同一层级上。（满二叉树每个分支都是满的）</p><p>完全二叉树：对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号为从1到n。如果这个树所有节点和同样深度的满二叉树的编号为从1到n的节点位置相同。</p><p>二叉树存储方式：链式存储结构和数组</p><h2 id="3-2-二叉树遍历"><a href="#3-2-二叉树遍历" class="headerlink" title="3.2 二叉树遍历"></a>3.2 二叉树遍历</h2><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>前序遍历：根节点、左子树、右子树</p><p>中序遍历：左子树、根节点、右子树</p><p>后序遍历：左子树、右子树、根节点</p><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p>层序遍历：一层层的遍历</p><h2 id="3-3-二叉堆（完全二叉树）"><a href="#3-3-二叉堆（完全二叉树）" class="headerlink" title="3.3 二叉堆（完全二叉树）"></a>3.3 二叉堆（完全二叉树）</h2><p>最大堆：任何一个父节点的值，都大于或等于它的左右孩子节点的值。</p><p>最小堆：任何一个父节点的值，都小于或等于它的左右孩子节点的值。</p><p>二叉堆的根节点叫做堆顶。最大堆的堆顶是最大元素，最小堆的堆顶是最小元素。</p><h2 id="3-4-优先队列"><a href="#3-4-优先队列" class="headerlink" title="3.4 优先队列"></a>3.4 优先队列</h2><p>二叉堆是实现优先队列的基础，队列先进先出。</p><p>入队列，将新元素置于队尾。出队列，队头元素最先被移除。</p><p>最大优先队列，无论入队顺序如何，都是当前最大的元素优先出队。</p><p>最小优先队列，无论入队顺序如何，都是当前最小的元素优先出队。</p><h1 id="四、排序算法"><a href="#四、排序算法" class="headerlink" title="四、排序算法"></a>四、排序算法</h1><h2 id="4-1-冒泡排序"><a href="#4-1-冒泡排序" class="headerlink" title="4.1 冒泡排序"></a>4.1 冒泡排序</h2><p>定义：把相邻的元素两两比较，当一个元素大于右侧相邻元素时，交换它们的位置；当一个元素小于或等于右侧相邻元素时，位置不变。</p><ul><li>一种稳定排序</li><li>每一轮都要遍历所有元素，总共遍历无数数量 -1 轮</li><li>平均时间复杂度为O(n2)</li></ul><h3 id="鸡尾酒排序"><a href="#鸡尾酒排序" class="headerlink" title="鸡尾酒排序"></a>鸡尾酒排序</h3><p>冒泡排序每一轮都是从左到右来比较元素，进行单向的位置交换的。</p><p>鸡尾酒排序的元素比较和交换过程是双向的。</p><h2 id="4-2-快速排序（交换排序）"><a href="#4-2-快速排序（交换排序）" class="headerlink" title="4.2 快速排序（交换排序）"></a>4.2 快速排序（交换排序）</h2><p>定义：在每一轮挑选一个基准元素，并让其他比它大的元素移动到数列一边，比它小的元素移动到数列的另一边，从而把数列拆解成两个部份。(分治法)</p><ul><li>选择基准元素</li><li>元素的交换：双边循环法、单边循环法</li><li>非递归实现</li></ul><h2 id="4-3-堆排序"><a href="#4-3-堆排序" class="headerlink" title="4.3 堆排序"></a>4.3 堆排序</h2><p>1、把无序数组构建成二叉堆。需要从小到大排序，则构建成最大堆；需要从大到小排序，则构建成最小堆。</p><p>2、循环删除堆顶元素，替换到二叉堆的末尾，调整堆产生新的堆顶。</p><h2 id="4-4-计数排序和桶排序"><a href="#4-4-计数排序和桶排序" class="headerlink" title="4.4 计数排序和桶排序"></a>4.4 计数排序和桶排序</h2><p>线性时间的排序</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>…</p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><ol><li>创建这些桶并确定每个桶的区间范围</li><li>遍历原始数列，把元素对号入座放入各个桶中。</li><li>对每个树内部的元素分别进行排序。（显然只有第一个桶需要排序）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、算法概述&quot;&gt;&lt;a href=&quot;#一、算法概述&quot; class=&quot;headerlink&quot; title=&quot;一、算法概述&quot;&gt;&lt;/a&gt;一、算法概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-算法algorithm和数据结构&quot;&gt;&lt;a href=&quot;#1-1-算法algorithm和数
      
    
    </summary>
    
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="小灰" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%81%B0/"/>
    
  </entry>
  
  <entry>
    <title>如何成为一个会学习的人</title>
    <link href="http://yoursite.com/2022/04/22/book/2022/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%BC%9A%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%BA%BA/"/>
    <id>http://yoursite.com/2022/04/22/book/2022/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%BC%9A%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%BA%BA/</id>
    <published>2022-04-22T02:00:00.000Z</published>
    <updated>2022-06-05T14:29:00.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全身心投入"><a href="#全身心投入" class="headerlink" title="全身心投入"></a>全身心投入</h1><blockquote><p> 将专注力应用学习的好处</p></blockquote><ul><li>能在短时间内取得成果</li><li>能把一天变成72小时</li><li>不再为了努力而努力</li></ul><blockquote><p>找到学习令人沉迷的要点</p></blockquote><ul><li>能够快速获得成就感</li></ul><blockquote><p>要重视“全身心投入”而非“效率”</p></blockquote><h1 id="一、学习停不下来！磨炼“专注力”！"><a href="#一、学习停不下来！磨炼“专注力”！" class="headerlink" title="一、学习停不下来！磨炼“专注力”！"></a>一、学习停不下来！磨炼“专注力”！</h1><h3 id="只有喜欢，才能擅长"><a href="#只有喜欢，才能擅长" class="headerlink" title="只有喜欢，才能擅长"></a>只有喜欢，才能擅长</h3><p>因为喜欢才全身心投入，并一直坚持下去的结果。<br>无论是学习还是兴趣爱好，我都认为“只有喜欢，才能擅长”。<br>即使做不到，也不要怕丢人，重要的是大胆地迈出第一步。<br>只要始终保持喜欢的心态，就一定能够不断精进。</p><h3 id="大家热衷的事情，要尝试去做"><a href="#大家热衷的事情，要尝试去做" class="headerlink" title="大家热衷的事情，要尝试去做"></a>大家热衷的事情，要尝试去做</h3><h3 id="只需增加“天线”，信息就会纷至沓来"><a href="#只需增加“天线”，信息就会纷至沓来" class="headerlink" title="只需增加“天线”，信息就会纷至沓来"></a>只需增加“天线”，信息就会纷至沓来</h3><h3 id="善于倾听才能善于学习"><a href="#善于倾听才能善于学习" class="headerlink" title="善于倾听才能善于学习"></a>善于倾听才能善于学习</h3><h3 id="经常带着问号，锻炼逻辑思维"><a href="#经常带着问号，锻炼逻辑思维" class="headerlink" title="经常带着问号，锻炼逻辑思维"></a>经常带着问号，锻炼逻辑思维</h3><h3 id="“遇到困难”更有利于吸取知识"><a href="#“遇到困难”更有利于吸取知识" class="headerlink" title="“遇到困难”更有利于吸取知识"></a>“遇到困难”更有利于吸取知识</h3><h3 id="不顺利的时候毫不犹豫地妥协"><a href="#不顺利的时候毫不犹豫地妥协" class="headerlink" title="不顺利的时候毫不犹豫地妥协"></a>不顺利的时候毫不犹豫地妥协</h3><p>有时候需要妥协，放松自己。这才是持续下去的秘诀</p><h3 id="利用“付出金钱就希望收回成本”的潜意识"><a href="#利用“付出金钱就希望收回成本”的潜意识" class="headerlink" title="利用“付出金钱就希望收回成本”的潜意识"></a>利用“付出金钱就希望收回成本”的潜意识</h3><h3 id="先尝试着去做，机会才能到来"><a href="#先尝试着去做，机会才能到来" class="headerlink" title="先尝试着去做，机会才能到来"></a>先尝试着去做，机会才能到来</h3><h1 id="二、同时提高逻辑思维能力、记忆力、专注力的学习术"><a href="#二、同时提高逻辑思维能力、记忆力、专注力的学习术" class="headerlink" title="二、同时提高逻辑思维能力、记忆力、专注力的学习术"></a>二、同时提高逻辑思维能力、记忆力、专注力的学习术</h1><h3 id="五分钟回顾学习法"><a href="#五分钟回顾学习法" class="headerlink" title="五分钟回顾学习法"></a>五分钟回顾学习法</h3><ul><li>每1-2页回顾一次</li><li>每个项目总结一次</li><li>每个章节重新审视</li></ul><p>迅速提高逻辑思维能力的“立场转换法“，反复论证AB角色<br>提高记忆力、专注力的“散步锻炼法”<br>随时随地能够自动复习的“自问自答法”<br>通过音乐提升情绪的“自我动力转换法”<br>一张A4纸就能飞速提高记忆固化率的“睡前检查法”<br>体验成就感，稳定进步的“音效激励法”<br>背诵复杂内容的“反复诵读法”<br>打造超专注空间的“秘密基地法” - 狭小空间、消除诱惑<br>轻松提高阅读速度的“速读捕获法“ - 词组</p><h1 id="三、把“做不到”变成“做得到”！把不擅长的领域变成擅长的领域"><a href="#三、把“做不到”变成“做得到”！把不擅长的领域变成擅长的领域" class="headerlink" title="三、把“做不到”变成“做得到”！把不擅长的领域变成擅长的领域"></a>三、把“做不到”变成“做得到”！把不擅长的领域变成擅长的领域</h1><h3 id="把学会的项目写出来、可视化"><a href="#把学会的项目写出来、可视化" class="headerlink" title="把学会的项目写出来、可视化"></a>把学会的项目写出来、可视化</h3><h3 id="只要遵守三个规则，就一定能全身心投入"><a href="#只要遵守三个规则，就一定能全身心投入" class="headerlink" title="只要遵守三个规则，就一定能全身心投入"></a>只要遵守三个规则，就一定能全身心投入</h3><ul><li>快速反馈</li><li>可以控制</li><li>保持平衡<h3 id="轻松了解自己学习能力的方法"><a href="#轻松了解自己学习能力的方法" class="headerlink" title="轻松了解自己学习能力的方法"></a>轻松了解自己学习能力的方法</h3></li><li>一点也不会</li><li>并不知道答案</li><li>看完答案解析就懂了</li><li>一定程度上了解<h3 id="想象“做”“不做”“实现”"><a href="#想象“做”“不做”“实现”" class="headerlink" title="想象“做”“不做”“实现”"></a>想象“做”“不做”“实现”</h3><h3 id="想办法“享受”学习"><a href="#想办法“享受”学习" class="headerlink" title="想办法“享受”学习"></a>想办法“享受”学习</h3><h3 id="战胜睡魔的五个方法"><a href="#战胜睡魔的五个方法" class="headerlink" title="战胜睡魔的五个方法"></a>战胜睡魔的五个方法</h3>深呼吸、营造沐浴晨光的环境、睡前泡个澡、做伸展运动、防蓝光</li></ul><h3 id="改变饮食习惯-提升专注力"><a href="#改变饮食习惯-提升专注力" class="headerlink" title="改变饮食习惯 提升专注力"></a>改变饮食习惯 提升专注力</h3><p>柠檬、葡萄糖、红茶</p><h2 id="把无趣的世界变得有趣的承诺合同"><a href="#把无趣的世界变得有趣的承诺合同" class="headerlink" title="把无趣的世界变得有趣的承诺合同"></a>把无趣的世界变得有趣的承诺合同</h2><h1 id="四、只有聪明之人才有的快乐学习的习惯"><a href="#四、只有聪明之人才有的快乐学习的习惯" class="headerlink" title="四、只有聪明之人才有的快乐学习的习惯"></a>四、只有聪明之人才有的快乐学习的习惯</h1><h3 id="专注学习需要养成某些习惯"><a href="#专注学习需要养成某些习惯" class="headerlink" title="专注学习需要养成某些习惯"></a>专注学习需要养成某些习惯</h3><h3 id="做让人赞叹不已的事"><a href="#做让人赞叹不已的事" class="headerlink" title="做让人赞叹不已的事"></a>做让人赞叹不已的事</h3><p>被称赞、数字化目标、时间轴</p><h3 id="给自己制造良好的反馈"><a href="#给自己制造良好的反馈" class="headerlink" title="给自己制造良好的反馈"></a>给自己制造良好的反馈</h3><h3 id="把看似毫无关系的事务联系起来，无论何时何地都在学习"><a href="#把看似毫无关系的事务联系起来，无论何时何地都在学习" class="headerlink" title="把看似毫无关系的事务联系起来，无论何时何地都在学习"></a>把看似毫无关系的事务联系起来，无论何时何地都在学习</h3><h3 id="把时间和金钱赚回来"><a href="#把时间和金钱赚回来" class="headerlink" title="把时间和金钱赚回来"></a>把时间和金钱赚回来</h3><h3 id="从略感兴趣到乐此不疲"><a href="#从略感兴趣到乐此不疲" class="headerlink" title="从略感兴趣到乐此不疲"></a>从略感兴趣到乐此不疲</h3><h3 id="必须要做的事情，要在最短时间内完成"><a href="#必须要做的事情，要在最短时间内完成" class="headerlink" title="必须要做的事情，要在最短时间内完成"></a>必须要做的事情，要在最短时间内完成</h3><h3 id="坚持本身就会产生成就感-朴实-X-脚踏实地-成就感"><a href="#坚持本身就会产生成就感-朴实-X-脚踏实地-成就感" class="headerlink" title="坚持本身就会产生成就感 朴实 X 脚踏实地 = 成就感"></a>坚持本身就会产生成就感 朴实 X 脚踏实地 = 成就感</h3><h3 id="有针对性的改造学习"><a href="#有针对性的改造学习" class="headerlink" title="有针对性的改造学习"></a>有针对性的改造学习</h3><h1 id="六个学习方法"><a href="#六个学习方法" class="headerlink" title="六个学习方法"></a>六个学习方法</h1><ul><li>费曼学习法</li><li>番茄工作法</li><li>金字塔原理</li><li>多元思维模型</li><li>5W2H分析思考法</li><li>康奈尔5R笔记法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;全身心投入&quot;&gt;&lt;a href=&quot;#全身心投入&quot; class=&quot;headerlink&quot; title=&quot;全身心投入&quot;&gt;&lt;/a&gt;全身心投入&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 将专注力应用学习的好处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;能在短时间
      
    
    </summary>
    
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2022-03】</title>
    <link href="http://yoursite.com/2022/03/30/weeks/2022/2022-03/"/>
    <id>http://yoursite.com/2022/03/30/weeks/2022/2022-03/</id>
    <published>2022-03-30T01:00:00.000Z</published>
    <updated>2022-10-03T02:32:28.215Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/hsxmYKSzZiURKmrq6Bo3jg" target="_blank" rel="noopener">深度：跨端技术的本质与现状</a></p><p><a href="https://mp.weixin.qq.com/s/H_uI_uuAOnjrmWuWDyQPCg" target="_blank" rel="noopener">重构知识的供给模式 ——《数据平台》从思考到落地</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/hsxmYKSzZiURKmrq6Bo3jg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深度：跨端技术的本质与现状&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.w
      
    
    </summary>
    
    
    
      <category term="跨端" scheme="http://yoursite.com/tags/%E8%B7%A8%E7%AB%AF/"/>
    
      <category term="数据平台" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>构建高性能WEB站点</title>
    <link href="http://yoursite.com/2022/03/10/book/2022/%E6%9E%84%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BDWEB%E7%AB%99%E7%82%B9/"/>
    <id>http://yoursite.com/2022/03/10/book/2022/%E6%9E%84%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BDWEB%E7%AB%99%E7%82%B9/</id>
    <published>2022-03-10T02:00:00.000Z</published>
    <updated>2022-06-05T14:08:41.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><p>了解等待的真相</p><p>查找瓶颈在哪里</p><p>增加带宽</p><p>减少网页中的HTTP请求数量</p><p>加快服务器脚本计算速度</p><p>使用动态内容缓存</p><p>将动态内容静态化</p><p>更换WEB服务器软件</p><p>页面组建分离</p><p>合理部署服务器</p><p>使用负载均衡</p><p>优化数据哭</p><p>考虑可扩展性</p><p>减少视觉等待</p><h1 id="二、数据的网络传输"><a href="#二、数据的网络传输" class="headerlink" title="二、数据的网络传输"></a>二、数据的网络传输</h1><p>增加带宽： bit/s 单位时间内的比特数</p><p>响应时间 = 发送时间 + 传输时间 + 处理时间</p><p>下载速度 = 数据量字节数/响应时间</p><p>互联互通：链接网络运营商</p><h1 id="三、服务器并发处理能力"><a href="#三、服务器并发处理能力" class="headerlink" title="三、服务器并发处理能力"></a>三、服务器并发处理能力</h1><p>吞吐率：前提条件 并发用户数、总请求数、请求资源描述，进行压力测试。</p><p>CPU并发计算：进程、线程、进程调度器、系统负载、进程切换、锁竞争。</p><p>系统调用：减少系统调用可以降低请求处理时间，提升吞吐率。</p><p>内存分配：Apache 内存池 、Nginx内存分配策略。</p><p>持久连接（长链接）：http 请求中长连接的声明 开启（ Connection:Keep-Alive）关闭（KeepAlive Off） 超时时间nginx（KeepAliveTimeout 30）</p><p>I/O模型：同步阻塞、同步非阻塞、多路I/O就绪通知、内存映射、直接I/O、异步I/O</p><p>服务器并发策略</p><h1 id="四、动态内容缓存"><a href="#四、动态内容缓存" class="headerlink" title="四、动态内容缓存"></a>四、动态内容缓存</h1><p>重复的开销</p><p>缓存与速度：整页、局部、数据缓存、代码解释器缓存、web服务器缓存。</p><p>缓存与缓冲：关系到命中率的问题，缓冲是视频中负责写入磁盘。</p><p>页面缓存：指MVC框架中动态网页的缓存。</p><p>缓存持久化与查找</p><p>过期检查：对缓存的动态内容存在重复计算，对有效时间外的缓存清理。</p><p>把缓存放到内存中：常规的缓存放到磁盘中会增加I/O操作。</p><p>把缓存放到缓存服务器：memcached通过TCP将缓存存储在独立的缓存服务器中。</p><p>局部无缓存：对于一些动态更新的区域无缓存。</p><p>静态化内容：</p><p>直接访问缓存</p><p>更新策略：在数据更新时重新生成静态化内容（由用户动态触发）；定时重新生成静态化内容。</p><p>局部静态化：SSI</p><h1 id="五、动态脚本加速"><a href="#五、动态脚本加速" class="headerlink" title="五、动态脚本加速"></a>五、动态脚本加速</h1><p>Oppose缓存：动态内容编译成二进制可执行文件，也就是目标代码。</p><p>解释器扩展模块：第三方的编译程序。</p><p>脚本跟踪与分析</p><p>代码段执行时间</p><p>上下文信息收集：配合代码跟踪收集信息，记录当前上下文信息，比如当前行号、哪里被调用。</p><p>代码覆盖范围</p><p>函数跟踪</p><p>瓶颈分析</p><h1 id="六、浏览器缓存"><a href="#六、浏览器缓存" class="headerlink" title="六、浏览器缓存"></a>六、浏览器缓存</h1><p>http缓存协商：WEB服务器和浏览器之间</p><p>彻底消灭请求：浏览器缓存截止期限；性能方面，没有发起请求，就进行不了压力测试。</p><h1 id="七、WEB服务器缓存"><a href="#七、WEB服务器缓存" class="headerlink" title="七、WEB服务器缓存"></a>七、WEB服务器缓存</h1><p>URL映射：增加了I/O开销。</p><p>缓存响应内容：将内容交给WEB服务器缓存，准备好缓存区；缓存静态内容；缓存动态内容；控制有效期；</p><h1 id="八、反向代理缓存"><a href="#八、反向代理缓存" class="headerlink" title="八、反向代理缓存"></a>八、反向代理缓存</h1><p>反向代理：WEB服务器隐藏在代理服务器之后。</p><p>在反向代理上创建缓存：修改缓存规则、清除缓存、监控缓存命中率、从缓存命中率中寻找答案、缓存命中率和后端吞吐率的理想计算模型、和动态内容缓存一起工作</p><p>小心穿过代理</p><p>流量分配</p><h1 id="九、WEB组件分离"><a href="#九、WEB组件分离" class="headerlink" title="九、WEB组件分离"></a>九、WEB组件分离</h1><p>拥有不同的域名</p><p>浏览器并发数</p><p>动态内容：开启opcode缓存、足够快的CPU、足够大的内存、多进程、与数据库保持高速连接、可靠的数据中心</p><p>静态网页：支持epoll、非阻塞I/O、异步I/O、使用sendfile()系统调用、单进程、使用高速磁盘、使用RAID分区、购买足够的带宽</p><p>图片：持久连接</p><p>样式表：有效期为一年</p><p>脚本</p><p>视频</p><h1 id="十、分布式缓存"><a href="#十、分布式缓存" class="headerlink" title="十、分布式缓存"></a>十、分布式缓存</h1><p>数据库的前端缓存区：读缓存区域、写缓存区域</p><p>使用memcached分布式缓存系统：使用key-value来存储数据、数据项设置过期时间、网络并发模型、对象序列化可将数据转化为二进制</p><p>读操作缓存：重复的身份验证、数据库索引、缓存用户登录状态</p><p>写操作缓存：直接更新、线程安全和锁竞争、原子加法</p><p>监控状态：空间使用率、缓存命中率、I/O流量</p><p>缓存扩展</p><h1 id="十一、数据库性能优化"><a href="#十一、数据库性能优化" class="headerlink" title="十一、数据库性能优化"></a>十一、数据库性能优化</h1><p>提供友好的状态报告</p><p>正确使用索引：使用组合索引、使用慢查询分析工具、索引缓存、索引的代价</p><p>锁定与等待：减少表锁定等待、行锁定带来了什么？真的好吗？</p><p>事务性表的性能</p><p>使用查询缓存</p><p>临时表</p><p>线程池</p><p>反规范化设计</p><p>放弃关系型数据库</p><h1 id="十二、WEB负载均衡"><a href="#十二、WEB负载均衡" class="headerlink" title="十二、WEB负载均衡"></a>十二、WEB负载均衡</h1><p>HTTP重定向</p><p>DNS负载均衡：多个A记录</p><p>反向代理负载均衡：转移和转发、按照权重分配任务、调度起的并发处理能力、扩展的制约、健康监测</p><p>IP负载均衡：DNAT反向NAT、用iptables来实现调度器、IPVS/ipvsadm、LVS-NAT、性能、动态调度策略、网关瓶颈、</p><p>直接路由：使用IP别名、将实际服务器接入外部网络、LVS-DR、转型到DNS-RR</p><p>IP隧道</p><p>考虑可用性</p><h1 id="十三、共享文件系统"><a href="#十三、共享文件系统" class="headerlink" title="十三、共享文件系统"></a>十三、共享文件系统</h1><p>网络共享：利用共享文件系统来实现图片共享、将集群中某台WEB服务器作为文件服务器</p><p>NFS：首选方案：基于RPC传输、统计I/O、延迟I/O、</p><p>局限性：有一定影响性能</p><h1 id="十四、内容分发和同步"><a href="#十四、内容分发和同步" class="headerlink" title="十四、内容分发和同步"></a>十四、内容分发和同步</h1><p>复制：图片服务器到多台WEB服务器到文件复制</p><p>SSH：SCP+SFTP、多级分发</p><p>WEBDAV：完全基于HTTP 与restful风格相似</p><p>HASH TREE</p><p>分发还是同步</p><p>反向代理</p><h1 id="十五、分布式文件系统"><a href="#十五、分布式文件系统" class="headerlink" title="十五、分布式文件系统"></a>十五、分布式文件系统</h1><p>文件系统：Hadoop</p><p>存储节点和追踪器</p><p>MogileFS: 开源的分布式文件系统</p><h1 id="十六、数据库扩展"><a href="#十六、数据库扩展" class="headerlink" title="十六、数据库扩展"></a>十六、数据库扩展</h1><p>复制和分离：主从复制、读写分离、使用数据库反向代理</p><p>垂直分区</p><p>水平分区：把数据放到不同分区中、分区和分表、分区扩展、分区反向代理、</p><h1 id="十七、分布式计算"><a href="#十七、分布式计算" class="headerlink" title="十七、分布式计算"></a>十七、分布式计算</h1><p>异步计算：分布式消息队列、Gearman、</p><p>并行计算：分而治之、MAP/REDUCE（分布式并行计算的开发框架）</p><h1 id="十八、性能监控"><a href="#十八、性能监控" class="headerlink" title="十八、性能监控"></a>十八、性能监控</h1><p>实时监控：Nmon、监控代理、系统监控、服务监控</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、绪论&quot;&gt;&lt;a href=&quot;#一、绪论&quot; class=&quot;headerlink&quot; title=&quot;一、绪论&quot;&gt;&lt;/a&gt;一、绪论&lt;/h1&gt;&lt;p&gt;了解等待的真相&lt;/p&gt;
&lt;p&gt;查找瓶颈在哪里&lt;/p&gt;
&lt;p&gt;增加带宽&lt;/p&gt;
&lt;p&gt;减少网页中的HTTP请求数量&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2022-02】</title>
    <link href="http://yoursite.com/2022/02/28/weeks/2022/2022-02/"/>
    <id>http://yoursite.com/2022/02/28/weeks/2022/2022-02/</id>
    <published>2022-02-28T01:00:00.000Z</published>
    <updated>2022-10-03T02:32:22.651Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/Gx2muPw2T9zYCdBPzIbzbg" target="_blank" rel="noopener">前端灰度发布落地方案</a></p><p><a href="https://my.oschina.net/youdaotech/blog/5440241" target="_blank" rel="noopener">前端技术分享：页面性能优化问题复盘</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Gx2muPw2T9zYCdBPzIbzbg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端灰度发布落地方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://my.osch
      
    
    </summary>
    
    
    
      <category term="性能" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2022-01】</title>
    <link href="http://yoursite.com/2022/01/30/weeks/2022/2022-01/"/>
    <id>http://yoursite.com/2022/01/30/weeks/2022/2022-01/</id>
    <published>2022-01-30T01:00:00.000Z</published>
    <updated>2022-10-03T02:32:20.154Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7036162494573838367?utm_source=gold_browser_extension" target="_blank" rel="noopener">60+ 实用 React 工具库，助力你高效开发！</a></p><p><a href="https://www.infoq.cn/article/k1Qpf3FaxNHdb7yqQptg" target="_blank" rel="noopener">展望大前端的 2022：VR 大潮来袭，大前端迎来新机遇</a></p><p><a href="https://www.infoq.cn/article/PRfJpajWiffdE6CvDiJ6" target="_blank" rel="noopener">解读大前端的 2021 ：究竟“卷”出了什么名堂？</a></p><p><a href="https://cointelegraphcn.com/news/web30-future" target="_blank" rel="noopener">深度丨一文看懂 Web3.0 的昨天、今天与明天</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7036162494573838367?utm_source=gold_browser_extension&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;60+ 实用 React 工具库，助力
      
    
    </summary>
    
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="大前端" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2021-12】</title>
    <link href="http://yoursite.com/2021/12/30/weeks/2021/2021-12/"/>
    <id>http://yoursite.com/2021/12/30/weeks/2021/2021-12/</id>
    <published>2021-12-30T01:00:00.000Z</published>
    <updated>2022-06-05T14:08:41.974Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://120.78.128.153/rustbook/ch00-00-introduction.html" target="_blank" rel="noopener">RUST 程序设计语言book</a></p><p>github:<a href="https://github.com/KaiserY/trpl-zh-cn" target="_blank" rel="noopener">https://github.com/KaiserY/trpl-zh-cn</a></p><p><a href="https://juejin.cn/post/7025868886914400293" target="_blank" rel="noopener">现代 Web 开发困局</a></p><p><a href="https://zhuanlan.zhihu.com/p/88616149" target="_blank" rel="noopener">现代 Web 开发的现状与未来（JSDC 2019 演讲全文）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://120.78.128.153/rustbook/ch00-00-introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RUST 程序设计语言book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github:&lt;a hr
      
    
    </summary>
    
    
    
      <category term="rust" scheme="http://yoursite.com/tags/rust/"/>
    
      <category term="weeks" scheme="http://yoursite.com/tags/weeks/"/>
    
      <category term="微前端" scheme="http://yoursite.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Rust程序设计语言 入门总结</title>
    <link href="http://yoursite.com/2021/12/10/book/2021/Rust%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2021/12/10/book/2021/Rust%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/</id>
    <published>2021-12-10T02:00:00.000Z</published>
    <updated>2022-06-05T14:08:41.958Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Cargo，内置的依赖管理器和构建工具，它能轻松增加、编译和管理依赖，并使其在 Rust 生态系统中保持一致。</li><li>Rustfmt 确保开发者遵循一致的代码风格。</li><li>Rust Language Server 为集成开发环境（IDE）提供了强大的代码补全和内联错误信息功能。</li></ul><h3 id="编译和运行是彼此独立的步骤"><a href="#编译和运行是彼此独立的步骤" class="headerlink" title="编译和运行是彼此独立的步骤"></a>编译和运行是彼此独立的步骤</h3><p>$ rustc main.rs</p><p>Rust 是一种 <strong>预编译静态类型</strong>（<em>ahead-of-time compiled</em>）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。</p><h2 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h2><p>Cargo 是 Rust 的构建系统和包管理器。大多数 Rustacean 们使用 Cargo 来管理他们的 Rust 项目，因为它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库。（我们把代码所需要的库叫做 <strong>依赖</strong>（<em>dependencies</em>））。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cargo new hello_cargo</span><br><span class="line">$ cargo build</span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>cargo build</code> 或 <code>cargo check</code> 构建项目。</li><li>可以使用 <code>cargo run</code> 一步构建并运行项目。</li><li>有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 <em>target/debug</em> 目录。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Cargo，内置的依赖管理器和构建工具，它能轻松增加、编译和管理依赖，并使其在 Rust 生态系统中保持一致。&lt;/li&gt;
&lt;li&gt;Rustfmt 确保开发者遵循一致的代码风格。&lt;/li&gt;
&lt;li&gt;Rust Language Server 为集成开发环境（IDE）
      
    
    </summary>
    
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="rust" scheme="http://yoursite.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2021-11】</title>
    <link href="http://yoursite.com/2021/11/30/weeks/2021/2021-11/"/>
    <id>http://yoursite.com/2021/11/30/weeks/2021/2021-11/</id>
    <published>2021-11-30T01:00:00.000Z</published>
    <updated>2022-06-05T14:08:41.974Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7023623964110880782" target="_blank" rel="noopener">字节跳动Web Infra发起 Modern.js 开源项目</a></p><p><a href="https://juejin.cn/post/6844903828123320334" target="_blank" rel="noopener">使用JSDoc提高代码的可读性</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7023623964110880782&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;字节跳动Web Infra发起 Modern.js 开源项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;ht
      
    
    </summary>
    
    
    
      <category term="weeks" scheme="http://yoursite.com/tags/weeks/"/>
    
      <category term="webgl" scheme="http://yoursite.com/tags/webgl/"/>
    
      <category term="微前端" scheme="http://yoursite.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2021-10】</title>
    <link href="http://yoursite.com/2021/10/30/weeks/2021/2021-10/"/>
    <id>http://yoursite.com/2021/10/30/weeks/2021/2021-10/</id>
    <published>2021-10-30T01:00:00.000Z</published>
    <updated>2022-06-05T14:08:41.973Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/110543466" target="_blank" rel="noopener">MySQL 数据表设计规范</a><br><a href="https://juejin.cn/post/7002176233115123725" target="_blank" rel="noopener">Nest.js 实践总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/110543466&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL 数据表设计规范&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://juejin.cn/post/7002
      
    
    </summary>
    
    
    
      <category term="weeks" scheme="http://yoursite.com/tags/weeks/"/>
    
      <category term="webgl" scheme="http://yoursite.com/tags/webgl/"/>
    
      <category term="微前端" scheme="http://yoursite.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端月刊【2021-09】</title>
    <link href="http://yoursite.com/2021/09/30/weeks/2021/2021-09/"/>
    <id>http://yoursite.com/2021/09/30/weeks/2021/2021-09/</id>
    <published>2021-09-30T01:00:00.000Z</published>
    <updated>2022-06-05T14:08:41.973Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/03VvGsJ2IUx9fcdpMxbqhQ" target="_blank" rel="noopener">WebGL 概念和基础入门</a></p><p><a href="https://juejin.cn/post/7004661323124441102#heading-0" target="_blank" rel="noopener">从零到一实现企业级微前端框架</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/03VvGsJ2IUx9fcdpMxbqhQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WebGL 概念和基础入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juej
      
    
    </summary>
    
    
    
      <category term="weeks" scheme="http://yoursite.com/tags/weeks/"/>
    
      <category term="webgl" scheme="http://yoursite.com/tags/webgl/"/>
    
      <category term="微前端" scheme="http://yoursite.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
